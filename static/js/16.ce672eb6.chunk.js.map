{"version":3,"sources":["decentralized/pinner/ethereumIpfsPinner2.js","decentralized/pinner/samplesPinner.js","components/PinnerComponent.js"],"names":["bs58","require","ipfs","ipfsAPI","protocol","Date","prototype","formatMMDDYYYY","this","getMonth","getDate","getFullYear","Pinner","contract","topics","ipfsIndex","provide","arguments","length","undefined","byChunks","Object","_Users_alecresende_code_visual_sampler_sequencer_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","web3","eth","Contract","abi","contractAddress","pinningSounds","Set","pinnedSounds","failedSounds","queuedSounds","providedSounds","badBlockRanges","localRefs","currentBlockDate","yo","date","pinned","pinning","local","queued","failed","_callee","_this","_Users_alecresende_code_visual_sampler_sequencer_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context","prev","next","console","log","refs","err","hashes","map","h","Ref","stop","_this2","subscribe","address","options","fromBlock","result","robustPin","bytes32ToIPFSHash","_callee2","blockNumber","_context2","getBlockNumber","sent","pinAllHelper","_callee3","toBlock","blockChunkSize","i","_fromBlock","_toBlock","_args3","_context3","pinFromBlockToBlock","sleep","t0","push","t1","keys","t2","done","value","Math","ceil","_callee5","_this3","_context5","getBlock","timestamp","abrupt","Promise","resolve","reject","getPastLogs","utils","toHex","_ref","_Users_alecresende_code_visual_sampler_sequencer_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","mark","_callee4","results","_context4","reverse","pinHashes","_x6","_x7","apply","ms","setTimeout","_callee6","sounds","batchSize","trying","promises","j","_i","_this4","_context6","has","filter","s","Array","from","forEach","add","pin","all","concat","delete","_callee7","hash","_args7","_context7","_this5","_ref2","_callee9","title","success","_context9","size","ethereum","getTitleForSound","myIpfs","getSound","_ref3","_callee8","res","_context8","dht","_x12","_x13","_x10","_x11","hash_hex","buf","Buffer","replace","encode","ethereumContract","SamplesPinner","classCallCheck","samplesPinner","sha3","pinAll","getStats","PinnerComponent","props","_super","call","state","downloading","stats","counter","filesDownloading","tagsDownloading","notConnected","setState","isConnectedLocally","interval","setInterval","asyncToGenerator","regenerator_default","getTagsForSound","x","react_default","createElement","className","href","ConditionedComponent","condition","onClick","onClickStart","toString","Component"],"mappings":"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","file":"static/js/16.ce672eb6.chunk.js","sourcesContent":["import ethereum from '../ethereum.js';\nimport {web3} from '../web3.js';\nimport myIpfs from '../Ipfs.js';\nimport ipfsAPI from 'ipfs-http-client'; \nvar Web3 = require('web3');\n\nconst bs58 = require('bs58')\n\nconst ipfs = ipfsAPI('localhost', '5001', {protocol: 'http'});\n\nconst BLOCK_CHUNK_SIZE = 70000;\n\nDate.prototype.formatMMDDYYYY = function(){\n    return (this.getMonth() + 1) + \n        \"/\" +  this.getDate() +\n        \"/\" +  this.getFullYear();\n}\n\nclass Pinner {\n    constructor(contract, topics, ipfsIndex, provide=false, byChunks=false) {\n        this.contract = new web3.eth.Contract(contract.abi, contract.contractAddress);\n        this.topics = topics;\n        this.ipfsIndex = ipfsIndex;\n        this.pinningSounds = new Set();\n        this.pinnedSounds = new Set();\n        this.failedSounds = new Set();\n        this.queuedSounds = new Set();\n        this.providedSounds = 0;\n        this.provide = provide;\n        this.byChunks = byChunks;\n        this.badBlockRanges = [];\n        this.localRefs = new Set();\n        this.currentBlockDate = new Date();\n\n        this.yo();\n    }\n\n    getStats() {\n        return {\n            date: this.currentBlockDate,\n            pinned: this.pinnedSounds,\n            pinning: this.pinningSounds,\n            local: this.localRefs,\n            queued: this.queuedSounds,\n            failed: this.failedSounds,\n        };\n    }\n\n    async yo() {\n        console.log('getting ipfs refs');\n        ipfs.refs.local((err, hashes) => {\n            if (err) {\n                return;\n            }\n            console.log(err);\n            console.log('ipfs local returned');\n            console.log(hashes);\n            this.localRefs = new Set(hashes.map(\n                h => h.Ref));\n        });\n    }\n\n    watchAndPin() {\n        web3.eth.subscribe(\n            'logs',\n            {\n                address: this.contract.options.address,\n                topics: this.topics,\n                fromBlock: '0x1'\n            },\n            (err, result) => {\n                if (err) {\n                    console.log(err);\n                    return;\n                }\n                if (result === undefined || result == null) {\n                    console.log('there was nothing...');\n                    return;\n                }\n                console.log('got a log to pin!');\n                this.robustPin(bytes32ToIPFSHash(result.topics[this.ipfsIndex]));\n            });\n    }\n\n    async pinAll() {\n        let blockNumber = await web3.eth.getBlockNumber();\n        console.log('BLOCK NUMBER RETURNED =' + blockNumber);\n\n        this.pinAllHelper(3000000, blockNumber, BLOCK_CHUNK_SIZE)\n    }\n\n    async pinAllHelper(fromBlock, toBlock, blockChunkSize, redoFailures=true) {\n        let badBlockRanges = [];\n        console.log('pin all called');\n        if (!this.byChunks) {\n            this.pinFromBlockToBlock(1, undefined);\n        } else {\n            let blockNumber = toBlock;\n            console.log('block number = ' + blockNumber);\n            while (blockNumber >= fromBlock) {\n               try {\n                    await this.pinFromBlockToBlock(blockNumber - blockChunkSize, blockNumber);\n                    await this.sleep(550);\n                } catch (err) {\n                    console.log('encountered error while pinning blockNumber = ' + blockNumber);\n                    console.log(err);\n                    badBlockRanges.push(blockNumber);\n                    console.log('bad block ranges = ');\n                    console.log(badBlockRanges);\n                }\n                blockNumber -= blockChunkSize;\n            }\n\n            console.log('completed');\n            for (let i in badBlockRanges) {\n                let fromBlock = badBlockRanges[i] - blockChunkSize;\n                let toBlock = badBlockRanges[i];\n                await this.pinAllHelper(fromBlock, toBlock, Math.ceil(blockChunkSize / 2), false);\n            }\n        }\n    }\n\n\n    async pinFromBlockToBlock(fromBlock, toBlock) {\n        this.currentBlockDate = new Date((await web3.eth.getBlock(fromBlock)).timestamp*1000);\n        return new Promise((resolve, reject) => {\n            try {\n                web3.eth.getPastLogs({\n                    address: this.contract.options.address,\n                    topics: this.topics,\n                    toBlock: web3.utils.toHex(toBlock),\n                    fromBlock: web3.utils.toHex(fromBlock),\n                }, async (err, results) => {\n                    if (err) {\n                        console.log(\"GOT ERROR WHILE GETTING PAST LOGS!\");\n                        reject();\n                        return;\n                    }\n                    \n                    results.reverse();\n                    \n                    if (results.length > 0) {\n                        console.log('got ' + results.length + ' many files to pin in this range');\n                    }\n                    await this.pinHashes(\n                        results\n                            .map(result => result.topics[this.ipfsIndex])\n                            .map(result => bytes32ToIPFSHash(result)));\n                    \n                    resolve();\n                });\n            } catch (err) {\n                console.log(err);\n                reject(err);\n            }\n        });\n    }\n\n    sleep(ms) {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                resolve()\n            }, ms);\n        });\n    }\n\n    async pinHashes(sounds) {\n        if (this.localRefs.has !== undefined) {\n            sounds = sounds.filter(\n                s =>\n                    !this.localRefs.has(s));\n        } else {\n            console.log('didnt have local ref');\n        }\n\n        sounds = Array.from(new Set(sounds));\n        sounds.forEach(s => this.queuedSounds.add(s));\n        \n        let failed = [];\n        let batchSize = 8;\n        for (let i=0; i < sounds.length; i += batchSize) {\n            let trying = [];\n            try {\n                let promises = [];\n                for (let j=i; j < i + batchSize && j < sounds.length; j++) {\n                    trying.push(sounds[j]);\n                    promises.push(this.pin(sounds[j]));\n                }\n                await Promise.all(promises);\n\t\tlet y = await this.sleep(100);\n            } catch (err) {\n                console.log('IMPORTANT ERROR had err = ' + err);\n\n                failed = failed.concat(trying);\n                for (let i in failed) {\n                    this.failedSounds.add(failed[i]);\n                    if (this.pinningSounds.has(failed[i])) {\n                        this.pinningSounds.delete(failed[i]);\n                    }\n                }\n            }\n        }\n    }\n\n    async robustPin(hash, retries=0) {\n        try {\n            console.log('pinning ' + hash);\n            let x = await this.pin(hash);\n        } catch (e) {\n            console.log('had error pinning = ');\n            console.log(e);\n        }\n    }\n\n    pin(hash) {\n        return new Promise(async (resolve, reject) => {\n            let title = '';\n            this.pinningSounds.add(hash);\n            this.queuedSounds.delete(hash);\n            if (this.pinningSounds.size % 20 === 0) {\n                title = await ethereum.getTitleForSound(hash);\n            }\n\n\t\n            let success = false;\n            setTimeout(() => {\n                if (!success) {\n                    reject('timed out so failing');\n                } else {\n                    resolve();\n                }\n            }, 60000);\n            if (title !== '') {\n\t        console.log('pinning i = ' + this.pinningSounds.size + ' ' + title);\n            }\n\n            try {\n                let sound = await myIpfs.getSound(hash, 30000);\n            } catch (err) {\n                console.log('rejected the sound!');\n                reject(err);\n                return;\n            }\n            ipfs.pin.add(hash, async (err, res) => {\n                if (err) {\n                    reject(err);\n                } else {\n\t\t    this.pinnedSounds.add(hash);\n                    this.pinningSounds.delete(hash);\n                    if (this.failedSounds.has(hash)) {\n                        this.failedSounds.delete(hash);\n                    }\n\n\t\t    console.log('pinned i = ' + this.pinnedSounds.size + ' '  + title + ' (failures = ' + this.failedSounds.size + ')');\n                    \n                    if (this.provide) {\n                        ipfs.dht.provide(hash, (err, res) => {\n                            if (err) {\n                                console.log('error providing ' );\n                                console.log(err);\n                                reject(err);\n                            } else {\n\t\t\t       this.providedSounds++;\n                                console.log('provided i =' + this.providedSounds + ' '  + hash);\n                                success = true;\n                                resolve(hash);\n                            }\n                        });\n                    } else {\n                        success = true;\n                        resolve(hash);\n                    }\n                }\n            });\n        });\n    }\n}\n\nfunction bytes32ToIPFSHash(hash_hex) {\n    var buf = new Buffer(hash_hex.replace(/^0x/, '1220'), 'hex')\n    return bs58.encode(buf)\n}\n\n\nexport default Pinner;\n","import Pinner from './ethereumIpfsPinner2.js';\nimport Contract from '../contracts/ethereumContract.js';\nimport {web3} from '../web3.js';\n\nvar ethereumContract = new Contract();\n\nclass SamplesPinner {\n    constructor() {\n        console.log('constructing pinner');\n        this.samplesPinner = new Pinner(\n            ethereumContract,\n            [web3.utils.sha3('SampleCreated(address,bytes32,string)'), null, null],\n            2, // index of the ipfs index in topic\n            false,\n            true\n        );\n    }\n\n    pinAll() {\n        this.samplesPinner.pinAll();\n    }\n\n    getStats() {\n        return this.samplesPinner.getStats();\n    }\n}\n\nexport default SamplesPinner;\n\n","import SamplesPinner from 'decentralized/pinner/samplesPinner.js';\nimport React, { Component } from 'react';\nimport ConditionedComponent from 'components/ConditionedComponent.js';\nimport ethereum from 'decentralized/ethereum.js';\nimport ipfs from 'decentralized/Ipfs.js';\nimport '../Pinner.scss';\n\nclass PinnerComponent extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            downloading: false,\n            stats: {\n                date: new Date(),\n                local: new Set(),\n                pinned: new Set(),\n                pinning: new Set(),\n                failed: new Set(),\n                queued: new Set(),\n            },\n            counter: 0,\n            filesDownloading: {},\n            tagsDownloading: {},\n            notConnected: false,\n        };\n\n        this.samplesPinner = new SamplesPinner();\n\n        setTimeout(() => {\n            this.setState({notConnected: !ipfs.isConnectedLocally()});\n        }, 15000);\n    }\n\n    onClickStart() {\n        this.setState({\n            downloading: true\n        });\n\n        this.samplesPinner.pinAll();\n\n        this.interval = setInterval(async () => {\n            let stats = this.samplesPinner.getStats()\n            let pinning = Array.from(stats.pinning);\n            for (let i in pinning) {\n                let hash = pinning[i];\n                if (hash in this.state.filesDownloading) {\n                    continue;\n                }\n                this.state.filesDownloading[hash] = await\n                ethereum.getTitleForSound(hash);\n\n                this.state.tagsDownloading[hash] = await ethereum.getTagsForSound(hash);\n            }\n            \n            this.state.counter++;\n            this.state.stats = stats;\n            this.setState(this.state);\n        }, 500);\n    }\n\n    render() {\n        let pinning = Array.from(this.state.stats.pinning);\n        let x = [];\n        for (let i=0; i < 350; i++) {\n            x.push(0);\n        }\n\n        if (this.state.notConnected) {\n            return (\n                <div className=\"downloader\">\n                  <div className=\"title\">Universal Sequences Downloader</div>\n                  <div className=\"action\">\n                  In order to download files onto your computer, please run <a href=\"https://github.com/ipfs-shipyard/ipfs-desktop\">IPFS</a>\n                  </div>\n                </div>\n            );\n        }\n\n        return (\n            <div className=\"downloader\">\n              <div className=\"title\">Universal Sequences Downloader</div>\n              <div className=\"divider\">\n                {x.map(\n                (a, i) => this.state.counter % x.length === i ? <span className=\"current\">/</span> : \"/\")}</div>\n \n\n              <ConditionedComponent condition={!this.state.downloading}>\n                <div\n                  onClick={() => this.onClickStart()}\n                  className=\"download-start-button\">Start</div>\n              </ConditionedComponent>\n              <ConditionedComponent condition={this.state.downloading && this.state.stats}>\n                <div>Downloaded up to: <span className=\"date\">{this.state.stats.date.toString()}</span></div>\n                <div>Downloaded: {this.state.stats.pinned.size} </div>\n                <div>Queued: {this.state.stats.queued.size} </div>\n                <div>Failed : {this.state.stats.failed.size}</div>\n              <div className=\"divider\">{x.map(x => \"/\")}</div>\n                <div>Downloading: <span className=\"file-name\">{this.state.stats.pinning.size}</span></div>\n                {pinning.map(\n                    (hash) =>\n                        <div>\n                              <span className=\"action\">Downloading</span> <span className=\"file-name\">{this.state.filesDownloading[hash]}...</span>\n                                  {(this.state.tagsDownloading[hash] || []).map(x => <span className=\"tag\">{x}</span>)}\n                        </div>)}\n                <div className=\"divider\">{x.map(x => \"/\")}</div>\n                <div>Local: {this.state.stats.local.size}</div>\n              </ConditionedComponent>\n            </div>\n        );\n    }\n}\n\nexport default PinnerComponent;\n"],"sourceRoot":""}