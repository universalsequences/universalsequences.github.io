{"version":3,"sources":["components/headless/getTrackLength.js","components/headless/ExportHelper.js","components/headless/ExportFull.js"],"names":["connect","state","_ref2","sequencerEngine","id","loadingProgress","sequencer","sequenceLoadingProgress","sequenceId","dispatch","_ref","_ref$option","option","MASTER","_useState","useState","_useState2","Object","slicedToArray","setBouncing","useEffect","trackLength","mixes","every","m","length","_step","_iterator","_createForOfIteratorHelper","subSequences","s","n","done","subSequence","value","switchToSubSequence","step","mix","track","tracks","numPatterns","patterns","patternNumber","len","getPatternLength","event","PatternSwitchEvent","insertEvent","err","e","f","bars","Math","max","apply","toConsumableArray","map","console","log","floor","getTrackLength","bounce","then","window","exportCompleted","react_default","a","createElement","ExportProgressBar","renderLength","props","_useSequencer","useSequencer","objectSpread","skipSampleRate","_useSequencer2","headless_ExportHelper"],"mappings":"ouCAIO,ICmCQA,cAXS,SAACC,EAADC,GAAiC,IAAxBC,EAAwBD,EAAxBC,gBAAiBC,EAAOF,EAAPE,GAChD,MAAO,CACHC,gBAAiBJ,EAAMK,UAAUC,wBAAwBH,GAAOD,GAAmBA,EAAgBK,aAAgB,IAI9F,SAACC,GAC1B,MAAO,IAIMT,CAhCM,SAAAU,GAAuD,IAArDP,EAAqDO,EAArDP,gBAAiBE,EAAoCK,EAApCL,gBAAoCM,EAAAD,EAAnBE,cAAmB,IAAAD,EAAZE,IAAYF,EAAAG,EAC1CC,oBAAS,GADiCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACzDK,GADyDH,EAAA,GAAAA,EAAA,IAexE,OAbAI,oBAAU,WACN,GAAwB,MAApBf,EAAyB,CAEzBc,GAAY,GACZ,IAAIE,EDTc,SAAClB,GAC3B,GAAIA,EAAgBmB,MAAMC,MAAM,SAAAC,GAAC,OAAiB,IAAbA,EAAEC,SAAe,KAAAC,EAAAC,EAAAC,EAE1BzB,EAAgB0B,cAFU,IAElD,IAAAF,EAAAG,MAAAJ,EAAAC,EAAAI,KAAAC,MAAsD,KAA7CC,EAA6CP,EAAAQ,MAClD/B,EAAgBgC,oBAAoBF,EAAY7B,IAChD,IAAIgC,EAAO,EACPC,EAAMJ,EAAYI,IAClBC,EAAQL,EAAYM,OAAO,GAC/B,GAAKD,EAML,IAHA,IAAIE,EAAcF,EAAMG,SAAShB,OAC7Bc,EAASN,EAAYM,OAEhBG,EAAc,EAAGA,EAAgBF,EAAaE,IAAiB,CACpE,IAAIC,EAAiE,EAA3DC,YAAiBzC,EAAiBuC,EAAeH,GACvDM,EAAQ,IAAIC,IAAmBJ,GACnCG,EAAMT,KAAOA,EACbC,EAAI5B,SAASsC,YAAYF,EAAOF,IAChCP,GAAQO,IAlBkC,MAAAK,GAAArB,EAAAsB,EAAAD,GAAA,QAAArB,EAAAuB,KAuBtD,IAAIC,EAAOC,KAAKC,IACZ,EACAD,KAAKC,IAALC,MAAAF,KAAInC,OAAAsC,EAAA,EAAAtC,CAASd,EAAgBmB,MAAMkC,IAAI,SAAAhC,GAAC,OAAIA,EAAEC,OAAO,GAAO,QAGhE,OADAgC,QAAQC,IAAI,cAAeP,GACpBC,KAAKO,MAAMR,GCpBQS,CAAezD,GACjC0D,YAAO1D,EAAiBkB,EAAaT,GAAQ,GACxCkD,KAAK,WACFC,OAAOC,iBAAkB,EACzB7C,GAAY,OAGzB,CAACd,EAAiBc,EAAahB,EAAiBS,IAG/CqD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAmBC,aAAc,OCI5BrE,sBAVS,SAACC,GACvB,MAAO,IAIkB,SAACQ,GAC1B,MAAO,IAIMT,CAvBI,SAACsE,GAAU,IAAAC,EAC+BC,YAAavD,OAAAwD,EAAA,EAAAxD,CAAA,GAC/DqD,EAD8D,CAEjEI,gBAAgB,KAHMC,EAAA1D,OAAAC,EAAA,EAAAD,CAAAsD,EAAA,GACNpE,GADMwE,EAAA,GAAAA,EAAA,IAAAA,EAAA,GAM1B,OACIV,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACS,EAAD,CAAczE,gBAAiBA","file":"static/js/23.bc58f35e.chunk.js","sourcesContent":["import {getPatternLength} from 'engine/BouncingEngine.js';\nimport {insertEvent} from 'session/operations/actions.js';\nimport PatternSwitchEvent from 'session/PatternSwitchEvent.js';\n\nexport const getTrackLength = (sequencerEngine) => {\n    if (sequencerEngine.mixes.every(m => m.length === 0)) {\n        // then create a new mix\n        for (let subSequence of sequencerEngine.subSequences) {\n            sequencerEngine.switchToSubSequence(subSequence.id);\n            let step = 0;\n            let mix = subSequence.mix;\n            let track = subSequence.tracks[0];\n            if (!track) {\n                continue;\n            }\n            let numPatterns = track.patterns.length;\n            let tracks = subSequence.tracks;\n\n            for (let patternNumber=0; patternNumber < numPatterns; patternNumber++) {\n                let len = getPatternLength(sequencerEngine, patternNumber, tracks) * 4;\n                let event = new PatternSwitchEvent(patternNumber);\n                event.step = step;\n                mix.dispatch(insertEvent(event, len));\n                step += len;\n            }\n        }\n    }\n\n    let bars = Math.max(\n        8,\n        Math.max(... sequencerEngine.mixes.map(m => m.length/32.0 + 16)));\n\n    console.log(\"NUM BARS = \", bars);\n    return Math.floor(bars);\n};\n","import React, { useEffect, useCallback, useState} from 'react';\nimport ExportProgressBar from \"components/progressbar/ExportProgressBar.js\";\nimport {bounce} from 'engine/BouncingEngine.js';\nimport {connect} from 'react-redux';\nimport {MASTER, GROUPS} from 'constants/render-options.js';\nimport {getTrackLength} from './getTrackLength.js';\n\nconst ExportHelper = ({sequencerEngine, loadingProgress, option=MASTER}) => { \n    let [bouncing, setBouncing] = useState(false);\n    useEffect(() => {\n        if (loadingProgress === 100) {\n            // then we export\n            setBouncing(true);\n            let trackLength = getTrackLength(sequencerEngine);\n            bounce(sequencerEngine, trackLength, option, true)\n                .then(() => {\n                    window.exportCompleted = true;\n                    setBouncing(false);\n                });\n        }\n    }, [loadingProgress, setBouncing, sequencerEngine, option]);\n\n    return (\n        <div>\n          <ExportProgressBar renderLength={8}/>\n        </div>);\n}\n\nconst mapStateToProps = (state, {sequencerEngine, id})=> {\n  return {\n      loadingProgress: state.sequencer.sequenceLoadingProgress[id || (sequencerEngine && sequencerEngine.sequenceId)] || 0\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExportHelper);\n","import React, { useEffect, useCallback, useState} from 'react';\nimport {useSequencer} from 'components/v2/useSequencer.js';\nimport ExportHelper from './ExportHelper.js';\nimport {connect} from 'react-redux';\n\nconst ExportFull = (props) => { \n    let [ethereumCache, sequencerEngine, ethereumSearcher] = useSequencer({\n        ...props,\n        skipSampleRate: true\n    });\n    \n    return (\n        <div>\n          <ExportHelper sequencerEngine={sequencerEngine}/>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExportFull);\n"],"sourceRoot":""}