{"version":3,"sources":["components/collect/trim.js","components/collect/Sidebar.js","components/nft/useZoraCollection.js","components/collect/SampleInformation.js","components/collect/Bidder.js","components/collect/OwnerAndCreator.js","components/collect/WorkBids.js","components/collect/useBPM.js","components/collect/useBids.js","nft/auction.js","components/collect/ReserveAuctionFinished.js","components/collect/LaunchAuctionFlow.js","components/collect/msToTime.js","components/collect/BidFlow.js","components/collect/AuctionTimer.js","components/collect/ReserveMet.js","components/collect/ReservePending.js","components/collect/AuctionButton.js","components/collect/WorkInformation.js","components/collect/MintedWorkViewer.js","components/collect/Pricing.js","components/collect/Metadata.js","components/collect/WorkThumbnail.js","components/collect/MintedCollection.js","components/collect/ConnectWallet.js","components/collect/CollectPage.js"],"names":["trimName","str","length","slice","connect","state","props","dispatch","_ref","setValue","value","userId","clearUser","workCount","react_default","a","createElement","className","src","placeholder","onChange","e","target","onClick","CONTRACT","ZProjects","contractAddress","getWorksByUser","Promise","resolve","query","concat","request","then","data","creations","map","x","parseInt","id","getWorks","Object","asyncToGenerator","regenerator_default","mark","_callee","ids","useStorage","results","stored","_args","arguments","wrap","_context","prev","next","undefined","BackendQuery","from","ZoraProject","select","whereIn","executeQuery","sent","window","localStorage","getItem","JSON","parse","some","zoraId","toConsumableArray","abrupt","stop","_x","apply","this","projectHash","connected","bidder","owner","creator","_useState","useState","_useState2","slicedToArray","creatorName","_useState3","_useState4","ownerName","collect_Bidder","bids","console","log","bid","bidType","pricing","amount","Math","pow","useBPM","hash","bpm","setBPM","useEffect","ipfs","getJson","json","useBids","reserve","allBids","previousBids","currentBid","setBids","setCurrentBid","_useState5","status","_useState6","setStatus","_useState7","reservePrice","_useState8","newBid","useCallback","placeBid","auctionId","chainId","wallet","auctionHouse","tx","getSigner","AuctionHouse","createBid","wait","_x2","endAuction","_ref2","_callee2","_args2","_context2","_x3","launchAuction","_ref3","_callee3","tokenId","duration","zora","approvalTx","createAuctionTx","_args3","_context3","Zora","approve","address","createAuction","_x4","_x5","_x6","placedBy","isOwner","setSettingUp","claimed","setClaimed","highestBid","current","finalBid","find","prettyAmount","_pricing","claim","setAuctionLaunched","mediaId","setReservePrice","setDuration","launching","setLaunching","completed","setCompleted","isNumber","launch","parseFloat","UnknownProgressBar","width","text","ZoraField","name","set","get","msToTime","floor","seconds","minutes","setBidding","bidPrice","setBidPrice","confirming","setConfirming","error","setError","reserveMet","sendBid","_bidPrice","endTime","getTime","Date","tick","setTick","onTick","useInterval","bidding","expectedEndTimestamp","collect_BidFlow","collect_AuctionTimer","_placeBid","metadata","settingUp","auctionLaunched","collect_LaunchAuctionFlow","collect_ReservePending","collect_ReserveMet","defineProperty","collect_ReserveAuctionFinished","_useBids","nft","prevOwner","includes","tokenOwner","collect_OwnerAndCreator","collect_AuctionButton","href","description","collect_WorkBids","zoraNFT","contentURI","goBack","useNFTMetadata","metadataURI","location","ZoraRenderer","collect_WorkInformation","type","content","perpetual","createdAt","setUserId","ret","setUserName","getAuthorizedCreatorName","image","stopPropagation","collect_Pricing","createdAtTimestamp","setSelectedWork","useNFT","toString","refreshInterval","collect_Metadata","setWorkCount","scrollRef","selectedWork","works","setWorks","useZoraCollection","size","useScroll","collect_MintedWorkViewer","i","collect_WorkThumbnail","key","trim","setConnected","getAccounts","ref","useRef","searchTerm","setSearchTerm","_useState9","_useState10","scrollTo","collect_ConnectWallet","collect_Sidebar","nft_hooks_dist","networkId","Networks","RINKEBY","collect_MintedCollection","userName"],"mappings":"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","file":"static/js/13.816efe90.chunk.js","sourcesContent":["export const trimName = (str) => str.length > 15 ?\n    str.slice(0, 6) + '...' + str.slice(str.length - 4) : str;\n","import React, { useEffect, useCallback, useState} from 'react';\nimport {trimName} from './trim.js';\nimport {connect} from 'react-redux';\n\nconst Sidebar = ({setValue, value, userId, clearUser, workCount}) => { \n    return (\n        <div className=\"sidebar\">\n          <div className=\"search-container\">\n            <img src=\"/search.svg\" className=\"search-icon\"/>\n          <input placeholder=\"Search NFTs\" onChange={e => setValue(e.target.value)} value={value} className=\"collection-search\"></input>\n          </div>\n          {userId && <div\n                       onClick={clearUser}\n                       className=\"user-id-button pushable\">\n                       <div className=\"user-name\">\n                         {trimName(userId)}\n                       </div>\n                       <div className=\"ellipse\">x</div>\n                     </div>}\n          {userId && <div className=\"number-of-works\">\n                       <span>Minted</span> <div className=\"dot\"/><span>{workCount}</span>\n                     </div>}\n          <img className=\"logo-hiero\" src=\"/darkside-logo.svg\"/>\n        </div>);\n};\n\nconst mapStateToProps = (state, props) => {\n  return {\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Sidebar);\n","import React, {useState, useEffect} from 'react';\nimport {ZoraProject} from \"decentralized/EthereumEvents.js\";\nimport BackendQuery from \"decentralized/BackendQuery.js\";\nimport ZProjects from \"decentralized/contracts/ZProjectsContract.js\";\nimport { request, gql } from 'graphql-request'\n\n\nconst CONTRACT = new ZProjects().contractAddress;\n\nlet THE_GRAPH_MAINNET =  'https://api.thegraph.com/subgraphs/name/ourzora/zora-v1';\nlet THE_GRAPH_RINKEBY = 'https://api.thegraph.com/subgraphs/name/ourzora/zora-v1-rinkeby';\n\nexport const getWorksByUser = (userId) => {\n    return new Promise((resolve) => {\n        let query = `{\n        users(where:{id: \"${userId}\"}) {\n            creations {\n                id\n            }\n        }\n    }`;\n        \n        request(THE_GRAPH_RINKEBY, query).then((data) => {\n            if (data[\"users\"][0]) {\n                resolve(data[\"users\"][0].creations.map(x => parseInt(x.id)));\n            } else {\n                resolve([]);\n            }\n        });\n    });\n};\n\n// gets the minted Zora-NFTs for a given user\nexport const useZoraCollection = (userId) => {\n    let [works, setWorks] = useState([]);\n\n    useEffect(() => {\n//        setWorks([]);\n        let zoraIds = [];\n        console.log('userid changed=', userId);\n        if (userId) {\n            getWorksByUser(userId).then(\n                ids => {\n                    console.log('get works by user id=%s', userId, ids);\n                    getWorks(ids, false).then(setWorks);\n                });\n        } else {\n            getWorks().then(setWorks);\n        }\n    }, [userId, setWorks]);\n\n    return {works};\n};\n\nconst getWorks = async (ids, useStorage=true) => {\n    let query = new BackendQuery(CONTRACT)\n        .from(ZoraProject)\n        .select(\"projectHash\")\n        .select(\"zoraId\");\n\n    if (ids) {\n        query.whereIn(\"zoraId\", ids);\n    }\n    \n    let results = await query.executeQuery()\n    let stored = window.localStorage.getItem(\"new_zora_token\");\n    if (stored && useStorage) {\n        stored = JSON.parse(stored);\n        if (!results.some(x => x.zoraId === stored.zoraId)) {\n            results = [stored, ... results];\n        }\n    }\n    return results;\n};\n","import React, { useEffect, useCallback, useState} from 'react';\nimport {connect} from 'react-redux';\n\nconst SampleInformation = ({projectHash}) => { \n    return (\n        <div className=\"samples-information\">\n          \n        </div>);\n};\n\nconst mapStateToProps = (state, props) => {\n  return {\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SampleInformation);\n","import React, { useEffect, useCallback, useState} from 'react';\nimport {trimName} from './trim.js';\nimport {connect} from 'react-redux';\n\nconst Bidder = ({connected, bidder}) => { \n    return (<span className=\"bidder\">{bidder === undefined ? \"\" : connected === bidder ? \"You\" : trimName(bidder)}</span>);\n}\n\nconst mapStateToProps = (state, props) => {\n  return {\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Bidder);\n","import React, { useEffect, useCallback, useState} from 'react';\nimport {getAuthorizedCreatorName} from 'nft/sign.js';\nimport {connect} from 'react-redux';\nimport Bidder from \"components/collect/Bidder.js\";\n\nconst OwnerAndCreator = ({owner, creator, connected}) => { \n    let [creatorName, setCreatorName]= useState(creator);\n    let [ownerName, setOwnerName]= useState(owner);\n    /*\n    useEffect(() => {\n        getAuthorizedCreatorName(creator).then(\n            name => name ? setCreatorName(name) : 0);\n        getAuthorizedCreatorName(owner).then(\n            name => name ? setOwnerName(name) : 0);\n    }, [owner, creator, setCreatorName, setOwnerName]);\n    */\n\n  return (\n      <div className=\"creator-and-owner\">\n        <div className=\"c-item\">\n          <div className=\"c-label\">\n            Creator\n          </div>\n          <Bidder bidder={creatorName} connected={connected}/>\n        </div>\n        <div className=\"c-item\">\n          <div className=\"c-label\">\n            Owner\n          </div>\n          <Bidder bidder={ownerName} connected={connected}/>\n        </div>\n      </div>);\n};\n\nconst mapStateToProps = (state, props) => {\n  return {\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OwnerAndCreator);\n","import React, { useEffect, useCallback, useState} from 'react';\nimport Bidder from './Bidder.js';\nimport {connect} from 'react-redux';\n\nconst WorkBids = ({bids, data, connected}) => { \n    if (bids.length === 0) {\n        console.log(\"WorkBids: prev bids === 0\");\n        return (\n            <div className=\"work-bids\">\n              No bids yet.\n            </div>\n        );\n    }\n\n    console.log(\"bids = \", bids);\n    return (\n        <div className=\"work-bids\">\n          {bids.map(\n              bid => bid.bidType === \"Final\" ?\n                  <div className=\"bid-item\">\n                    <span className=\"sold-to\">Sold to</span>\n                    <Bidder bidder={bid.bidder.id} connected={connected}/>\n                    for <span className=\"bid-amount\">{bid.pricing.amount / Math.pow(10, 18)}</span> ETH\n                  </div>\n              :\n              <div className=\"bid-item\">\n                <Bidder bidder={bid.bidder.id} connected={connected}/>\n                placed a bid of <span className=\"bid-amount\">{bid.pricing.amount / Math.pow(10, 18)}</span> ETH\n              </div>\n          )}\n        </div>);\n}\n\nconst trim = (t) => t.length > 15 ? t.slice(0,15) + '...' : t;\n\nconst mapStateToProps = (state, props) => {\n  return {\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WorkBids);\n","import React, {useState, useEffect} from 'react';\nimport ipfs from \"decentralized/Ipfs.js\";\n\nexport const useBPM = (hash) => {\n    let [bpm, setBPM]= useState(undefined);\n\n    useEffect(() => {\n        ipfs.getJson(hash).then(\n            json => {\n                setBPM(json.bpm);\n            });\n    }, []);\n\n    return {bpm};\n};\n","import React, {useCallback, useState, useEffect} from 'react';\n\nexport const useBids = (data) => {\n    let {pricing} = data || {};\n    let {reserve} = pricing;\n    let allBids = [];\n    if (reserve) {\n        let {previousBids} = reserve;\n        allBids = reserve.currentBid ? [reserve.currentBid, ...previousBids] : previousBids;\n    }\n    let [bids, setBids] = useState(allBids);\n    let [currentBid, setCurrentBid] = useState(pricing && pricing.reserve && pricing.reserve.currentBid);\n    let [status, setStatus] = useState(pricing && pricing.status);\n    let [reservePrice, setReservePrice] = useState(pricing && pricing.reserve && pricing.reserve.reservePrice.amount / Math.pow(10, 18));\n\n    const newBid = useCallback((bidder, amount) => {\n        let bid = {\n            bidder: {\n                id: bidder\n            },\n            pricing: {\n                amount: amount\n            }\n        };\n        setBids([bid, ...bids]);\n        setCurrentBid(bid);\n        setStatus(\"RESERVE_AUCTION_ACTIVE\");\n    }, [setBids, bids, setCurrentBid, setStatus]);\n\n    return {bids, newBid, currentBid, status, reservePrice};\n};\n","\nimport { Zora, AuctionHouse } from '@zoralabs/zdk'\nimport {getSigner} from './sign.js';\n\n// todo: default chainId should be 1 once launched to mainnet\n\nexport const placeBid = async (auctionId, amount, chainId=4) => {\n    let wallet = await getSigner();\n    const auctionHouse = new AuctionHouse(wallet, chainId);\n    const tx = await auctionHouse.createBid(auctionId, amount);\n    await tx.wait();\n};\n\nexport const endAuction = async (auctionId, chainId=4) => {\n    let wallet = await getSigner();\n    const auctionHouse = new AuctionHouse(wallet, chainId);\n    const tx = await auctionHouse.endAuction(auctionId);\n    await tx.wait();\n};\n\n/**\n Launches an auction for NFT token\n @reservePrice : price in eth\n @duration : duration of auction in seconds\n @chainId : (1 -> main-net 4 -> rinkeby)\n *\n **/\nexport const launchAuction = async (tokenId, reservePrice, duration, chainId=4) => {\n    let wallet = await getSigner();\n    \n    const auctionHouse = new AuctionHouse(wallet, chainId);\n    const zora = new Zora(wallet, chainId);\n    \n    // 2. Approve the NFT to be placed on auction\n    const approvalTx = await zora.approve(auctionHouse.auctionHouse.address, tokenId);\n    \n    // 3. Await confirmation of the approval\n    await approvalTx.wait();\n    \n    // 3. Create the Auction\n    reservePrice *= Math.pow(10,9);\n    reservePrice = reservePrice + \"000000000\";\n    const createAuctionTx = await auctionHouse.createAuction(\n        tokenId,\n        duration,\n        reservePrice,\n        \"0x0000000000000000000000000000000000000000\", // no curator\n        0,\n        \"0x0000000000000000000000000000000000000000\", // no currency (just eth)\n    );\n\n    await createAuctionTx.wait();\n    \n};\n","import React, { useEffect, useCallback, useState} from 'react';\nimport Bidder from './Bidder.js';\nimport {endAuction} from 'nft/auction.js';\nimport {trimName} from './trim.js';\nimport {connect} from 'react-redux';\n\nconst ReserveAuctionFinished = ({pricing, isOwner, bidder, connected, setSettingUp}) => { \n    let {reserve} = pricing;\n    let [claimed, setClaimed] = useState(reserve.status === \"Finished\");\n    let {current} = reserve;\n    let {highestBid} = current;\n\n    let amount, placedBy;\n    if (reserve.status === \"Finished\") {\n        let {previousBids} = reserve;\n        let finalBid = previousBids.find(x => x.bidType === \"Final\");\n        if (finalBid) {\n            amount = finalBid.pricing.prettyAmount;\n            placedBy = finalBid.bidder.id;\n        }\n    } else if (highestBid) {\n        let _pricing = highestBid.pricing;\n        placedBy = highestBid.placedBy;\n        amount = _pricing.amount / Math.pow(10, 18);\n    }\n\n    const claim = useCallback(() => {\n        let id = reserve.id;\n        endAuction(id).then(\n            () => \n            setClaimed(true));\n    }, [reserve, setClaimed]);\n\n    console.log(\"AUCTION_FINISHED placedBy =\", placedBy, connected);\n    console.log(\"CLAIMED =\", claimed);\n    console.log(\"connected=\", connected);\n    return (\n        <div className=\"auction-finished\">\n          <div className=\"sold-for\">\n            Sold to <Bidder bidder={placedBy} connected={connected}/> for {amount} ETH\n          </div>\n          {(isOwner || connected === placedBy) && !claimed &&\n           <div onClick={claim} className=\"claim-button\">Claim Funds</div>}\n          {(isOwner) &&\n           claimed &&\n           <div onClick={() => setSettingUp(true)} className=\"claim-button\">New Auction</div>}\n        </div>\n    );\n};\n\nconst mapStateToProps = (state, props) => {\n  return {\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ReserveAuctionFinished);\n","import React, { useEffect, useCallback, useState} from 'react';\nimport UnknownProgressbar from \"components/progressbar/UnknownProgressBar.js\";\nimport {connect} from 'react-redux';\nimport {launchAuction, placeBid} from \"nft/auction.js\";\nimport {isNumber} from \"utils/IsNumber.js\"\nimport ZoraField from \"components/nft/ZoraField.js\";\n\nconst LaunchAuctionFlow = ({setSettingUp, mediaId}, setAuctionLaunched) => { \n    let [reservePrice, setReservePrice] = useState('');\n    let [duration, setDuration] = useState('');\n\n    let [launching, setLaunching] = useState(false);\n    let [completed, setCompleted] = useState(false);\n\n\n    useEffect(() => {\n        if (!isNumber(reservePrice) && reservePrice !== \".\") {\n            setReservePrice('');\n        }\n    }, [reservePrice, setReservePrice]);\n\n    useEffect(() => {\n        if (!isNumber(duration)) {\n            setDuration('');\n        }\n    }, [duration, setDuration]);\n\n    const launch = useCallback(async () => {\n        setLaunching(true);\n        await launchAuction(\n            mediaId,\n            parseFloat(reservePrice),\n            parseFloat(duration) * 60 * 60,\n            4);\n        setLaunching(false);\n        setCompleted(true);\n        setAuctionLaunched(true);\n    }, [duration, reservePrice, mediaId, setCompleted, setLaunching, setAuctionLaunched]);\n\n\n    if (completed) {\n        return (\n            <div className=\"auction-flow\">\n              <div className=\"flow-inner\">\n                Your auction has been launched!\n              <div className=\"buttons-bottom\">\n                <div onClick={() => setSettingUp(false)} className=\"launch\">Done</div>\n              </div>\n              </div>\n            </div>);\n    }\n\n\n    if (launching) {\n        return (\n            <div className=\"auction-flow\">\n              <div className=\"flow-inner\">\n                <UnknownProgressbar width={350} text=\"Launching your auction\"/>\n              </div>\n            </div>);\n    }\n    return (\n        <div className=\"auction-flow\">\n          <div className=\"flow-inner\">\n            <div className=\"auction-header\">Let's Setup Your Auction</div>\n            <div className=\"auction-description\">\n              To sell your NFT, we need to set up some things first. \n            </div>\n            \n            <ZoraField name=\"Reserve Price (in ETH)\" set={setReservePrice} get={reservePrice}/>\n            <ZoraField name=\"Duration (in hours)\" set={setDuration} get={duration}/>\n            \n            <div className=\"buttons-bottom\">\n              <div onClick={() => setSettingUp(false)} className=\"cancel\">Cancel</div>\n              <div onClick={launch} className={duration === \"\" || reservePrice === \"\" ? \"launch disabled\" : \"launch\"}>Launch Auction</div>\n            </div>\n          </div>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state, props) => {\n  return {\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LaunchAuctionFlow);\n","export const msToTime = (duration) => {\n  var milliseconds = Math.floor((duration % 1000) / 100),\n    seconds = Math.floor((duration / 1000) % 60),\n    minutes = Math.floor((duration / (1000 * 60)) % 60),\n    hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\n\n    seconds = (seconds < 10) ? \"0\" + seconds : seconds;\n\n    return hours + \"h \" + minutes + \"m \" + seconds + \"s \";\n}\n","import React, { useEffect, useCallback, useState} from 'react';\nimport UnknownProgressbar from \"components/progressbar/UnknownProgressBar.js\";\nimport {launchAuction, placeBid} from \"nft/auction.js\";\nimport {isNumber} from \"utils/IsNumber.js\"\nimport ZoraField from \"components/nft/ZoraField.js\";\nimport {connect} from 'react-redux';\nimport {msToTime} from './msToTime.js';\n\nconst BidFlow = ({connected, pricing, setBidding, newBid}) => { \n    let [bidPrice, setBidPrice] = useState('');\n    let [confirming, setConfirming] = useState(false);\n    let [error, setError] = useState('');\n    let {reserve} = pricing;\n    let reserveMet = reserve.currentBid;\n    let currentBid = reserve.currentBid ? parseFloat(reserve.currentBid.pricing.amount) / Math.pow(10, 18) :\n        pricing.reserve.reservePrice.amount / Math.pow(10, 18);\n    let duration = parseFloat(reserve.duration) * 1000;\n\n    useEffect(() => {\n        if (bidPrice === \".\") {\n            return;\n        }\n        if (bidPrice !== \"\" && !isNumber(bidPrice)) {\n            setBidPrice(\"\");\n            setError(\"Put a valid number\");\n        } else {\n            if ((reserveMet && 1.05 * currentBid > parseFloat(bidPrice)) ||\n                (!reserveMet && currentBid > parseFloat(bidPrice))\n               ) {\n                setError(\"Place a bid higher than \" + currentBid);\n            } else {\n                setError(undefined);\n            }\n        };\n    }, [currentBid, bidPrice, setBidPrice, setError]);\n\n    const sendBid = useCallback(async () => {\n        setConfirming(true);\n        let _bidPrice = parseFloat(bidPrice) * Math.pow(10, 9) + '000000000';\n        await placeBid(pricing.reserve.id, _bidPrice);\n        newBid(connected, parseFloat(bidPrice) * Math.pow(10, 18));\n        setBidding(false);\n    }, [setBidding, bidPrice, setConfirming]);\n\n    return (\n        <div className=\"bid-flow auction-flow\">\n          <div className=\"flow-inner\">\n            <div className=\"auction-header\">\n              Place a Bid\n            </div>\n            {reserveMet ? <div className=\"highest-bid\">The highest bid is currently <span className=\"bid-amount\"> {currentBid} ETH</span>. Offer something higher to try to win this.</div> :\n             <div className=\"highest-bid\">\n               The reserve of <span onClick={() => setBidPrice(currentBid)} className=\"pushable bid-amount\">{currentBid} ETH</span> has not been met yet. Place a bid of at least that amount to kick off the auction (lasting {msToTime(duration)}).\n             </div>}\n            <ZoraField name=\"Bid Amount (in ETH)\" set={setBidPrice} get={bidPrice}/>\n            {error && <div className=\"bid-error\">{error}</div>}\n            {confirming ?\n             <UnknownProgressbar text=\"Processing your bid\"/> :\n             <div className=\"buttons-bottom\">\n               <div onClick={() => setBidding(false)} className=\"cancel\">Cancel</div>\n               <div onClick={sendBid} className={bidPrice === \"\" ? \"launch disabled\" : \"launch\"}>Send Bid</div>\n             </div>}\n          </div>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state, props) => {\n  return {\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BidFlow);\n","import React, { useEffect, useCallback, useState} from 'react';\nimport {connect} from 'react-redux';\nimport {useInterval} from \"components/hooks/useInterval.js\"\nimport {msToTime} from './msToTime.js';\n\n\nconst AuctionTimer = ({endTime}) => { \n    let [tick, setTick] = useState(endTime.getTime() - new Date().getTime());\n\n    const onTick = useCallback(() => {\n        setTick(endTime.getTime() - new Date().getTime());\n    }, [setTick]);\n\n    useInterval(onTick, 1000);\n    \n    if (tick < 0) {\n        return (\n            <div className=\"auction-timer\">\n              <span className=\"auction-ends\">Auction Ended</span> \n            </div>\n        );\n    }\n    return (\n        <div className=\"auction-timer\">\n          <span className=\"auction-ends\">Auction Ends</span> <span className=\"time-left\">{msToTime(tick)}</span>\n        </div>);\n};\n\n\n\nconst mapStateToProps = (state, props) => {\n  return {\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AuctionTimer);\n","import React, { useEffect, useCallback, useState} from 'react';\nimport BidFlow from './BidFlow.js';\nimport {launchAuction, placeBid} from \"nft/auction.js\";\nimport {connect} from 'react-redux';\nimport AuctionTimer from './AuctionTimer.js';\n\nconst ReserveMet = ({pricing, currentBid, isOwner, newBid, connected}) => { \n    let [bidding, setBidding] = useState(false);\n    // reserve was met so we are in an active auction\n    let {expectedEndTimestamp} = pricing.reserve;\n    let bidder = currentBid.bidder;\n    let _pricing = currentBid.pricing;\n    let endTime = new Date(parseInt(expectedEndTimestamp)*1000);\n\n    return (\n        <div className=\"reserve-price\">\n          {bidding && <BidFlow newBid={newBid} setBidding={setBidding} pricing={pricing} connected={connected}/>}\n          <div>\n            <div>\n        <span className=\"current-bid\">Current Bid</span> <span className=\"price-amount\">{_pricing.amount / Math.pow(10, 18)} ETH </span> </div>\n            <AuctionTimer endTime={endTime}/>\n          </div>\n          {isOwner ? <div  className=\"place-bid\">You Own This</div> :\n           connected ? <div onClick={() => setBidding(true)} className=\"place-bid\">Bid</div> : ''}\n          \n        </div>\n    );\n};\n\nconst mapStateToProps = (state, props) => {\n  return {\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ReserveMet);\n","import React, { useEffect, useCallback, useState} from 'react';\nimport BidFlow from \"components/collect/BidFlow.js\";\nimport {launchAuction, placeBid} from \"nft/auction.js\";\nimport {connect} from 'react-redux';\n\nconst ReservePending = ({connected, pricing, isOwner, newBid}) => { \n    let [bidding, setBidding] = useState(false);\n\n    const _placeBid = useCallback(() => {\n        setBidding(true);\n    }, [setBidding]);\n\n    return (\n        <div className=\"reserve-price\">\n          {bidding && <BidFlow newBid={newBid} setBidding={setBidding} pricing={pricing}/>}\n          Reserve Price <div className=\"price-amount\">{pricing.reserve.reservePrice.amount / Math.pow(10, 18)} ETH</div>\n          {connected && !isOwner && <div  onClick={_placeBid} className=\"place-bid\">Bid</div>}\n        </div>\n    );\n};\n\nconst mapStateToProps = (state, props) => {\n  return {\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ReservePending);\n","import React, { useEffect, useCallback, useState} from 'react';\nimport {useBids} from './useBids.js';\nimport ReserveAuctionFinished from './ReserveAuctionFinished.js';\nimport LaunchAuctionFlow from \"components/collect/LaunchAuctionFlow.js\";\nimport ReserveMet from \"components/collect/ReserveMet.js\";\nimport {launchAuction, placeBid} from \"nft/auction.js\";\nimport {isNumber} from \"utils/IsNumber.js\"\nimport ZoraField from \"components/nft/ZoraField.js\";\nimport ReservePending from \"components/collect/ReservePending.js\";\nimport {connect} from 'react-redux';\nimport './auction.scss';\nimport '../nft/zora.scss';\n\nconst AuctionButton = ({\n    newBid,\n    status,\n    mediaId,\n    data,\n    metadata,\n    connected,\n    isOwner,\n    currentBid\n}) => { \n    let {pricing} = data;\n    let [settingUp, setSettingUp] = useState(false);\n    let [auctionLaunched, setAuctionLaunched] = useState(false);\n\n    if (settingUp) {\n        return (<LaunchAuctionFlow\n                  setAuctionLaunched={setAuctionLaunched}\n                  setSettingUp={setSettingUp} mediaId={mediaId}/>);\n    }\n\n    if (status === \"RESERVE_AUCTION_PENDING\") {\n        return (<ReservePending\n                  newBid={newBid}\n                  connected={connected}\n                  pricing={pricing}\n                  isOwner={isOwner}/>);\n    }\n\n    if (status === \"RESERVE_AUCTION_ACTIVE\") {\n        return (<ReserveMet\n                  currentBid={currentBid}\n                  connected={connected}\n                  newBid={newBid}\n                  pricing={pricing}\n                  isOwner={isOwner}\n                  connected={connected}/>);\n    }\n\n    if (status === \"RESERVE_AUCTION_FINISHED\") {\n        return (<ReserveAuctionFinished\n                  setSettingUp={setSettingUp}\n                  pricing={pricing}\n                  isOwner={isOwner}\n                  connected={connected}/>);\n    }\n\n    if (auctionLaunched) {\n        return (<div className=\"not-for-sale\">Auction launched!</div>);\n    }\n\n    if (!connected) {\n        return '';\n    }\n\n    if (!settingUp && status === \"NO_PRICING\") {\n        if (isOwner) {\n            return (\n                <div\n                  onClick={() => setSettingUp(true)}\n                  className=\"setup-auction-button collect-button\">\n                  Setup Auction\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"not-for-sale\">Not for sale</div>\n            );\n        }\n    } else if (settingUp) {\n        return (<LaunchAuctionFlow\n                  setAuctionLaunched={setAuctionLaunched}\n                  setSettingUp={setSettingUp} mediaId={mediaId}/>);\n   } else {\n        return '';\n    }\n};\n\nconst mapStateToProps = (state, props) => {\n  return {\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AuctionButton);\n","import React, { useEffect, useCallback, useState} from 'react';\nimport SampleInformation from './SampleInformation.js';\nimport OwnerAndCreator from \"components/collect/OwnerAndCreator.js\"\nimport WorkBids from './WorkBids.js';\nimport {useBPM} from \"components/collect/useBPM.js\";\nimport {useBids} from './useBids.js';\nimport {getAuthorizedCreatorName} from 'nft/sign.js';\nimport {connect} from 'react-redux';\nimport AuctionButton from './AuctionButton.js';\nimport './work.scss';\n\nconst WorkInformation = ({data, mediaId, metadata, projectHash, connected}) => { \n    let {status, bids, newBid, currentBid} = useBids(data);\n\n    let {bpm} = useBPM(projectHash);\n    console.log(data, metadata);\n\n    let {nft} = data;\n    let {creator, owner, prevOwner} = nft;\n    if (status.includes(\"RESERVE\")) {\n        owner = data.pricing.reserve.tokenOwner.id;\n    }\n    let isOwner = owner === connected[0];\n\n    console.log(\"isOwner = %s owner=%s connected[0]=%s\", isOwner, owner, connected[0]);\n    console.log(\"work info=%s status=%s\", mediaId, status);\n    console.log(data);\n\n    return (\n        <div className=\"work-information\">\n          <div className=\"work-overview\">\n          <div className=\"creator-fields\">\n            <OwnerAndCreator creator={creator} owner={owner}/>\n            <AuctionButton\n              status={status}\n              isOwner={isOwner}\n              mediaId={mediaId}\n              currentBid={currentBid}\n              newBid={newBid}\n              connected={connected[0]}\n              data={data}\n              metadata={metadata}/>\n          </div>\n            <div className=\"creator-fields\">\n              <a href={\"https://zora.co/collections/zora/\" + mediaId}>Zora #{mediaId}</a>\n              {bpm && <div className=\"bpm\">\n                        {bpm} BPM\n                      </div>}\n            </div>\n          </div>\n          <div className=\"description\">\n            {metadata.description}\n          </div>\n          {/*          <SampleInformation projectHash={projectHash}/>*/}\n          <WorkBids bids={bids} connected={connected && connected[0]}/>\n          <a href={data.zoraNFT.contentURI}>View on IPFS</a>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state, props) => {\n  return {\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WorkInformation);\n","import React, { useEffect, useCallback, useState} from 'react';\nimport {getWorksByUser} from 'components/nft/useZoraCollection.js';\nimport ZoraRenderer from \"components/nft/ZoraRenderer.js\";\nimport {\n  MediaRendererProps,\n  MediaObject,\n  MediaConfiguration,\n} from \"@zoralabs/nft-components\";\nimport {connect} from 'react-redux';\nimport {\n    useNFT, useNFTMetadata\n} from \"@zoralabs/nft-hooks\";\nimport {\n    NFTFullPage\n} from \"@zoralabs/nft-components\";\nimport WorkInformation from './WorkInformation.js';\n\nconst MintedWorkViewer = ({data, mediaId, goBack, projectHash, connected}) => { \n    const {metadata} = useNFTMetadata(data.zoraNFT.metadataURI);\n    getWorksByUser(data.nft.creator);\n    return (\n        <div className=\"collect-nft-viewer\">\n          <div className=\"title-and-back\">\n            <div onClick={goBack} className=\"back-btn-container\">\n              <div className=\"back-btn\"></div>\n            </div>\n            <div className=\"work-name\">\n              {metadata.name}\n            </div>\n            <div onClick={() => window.location.href = \"/v3/\" + projectHash} className=\"go-to-project\">\n              Go To Project\n            </div>\n          </div>\n          {metadata && <ZoraRenderer contentURI={data.zoraNFT.contentURI} metadata={metadata}/>}\n          <WorkInformation\n            mediaId={mediaId}\n            data={data}\n            projectHash={projectHash}\n            metadata={metadata}\n            connected={connected}\n          />\n        </div>);\n}\n\nconst mapStateToProps = (state, props) => {\n  return {\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MintedWorkViewer);\n","import React, { useEffect, useCallback, useState} from 'react';\nimport {useBPM} from './useBPM.js';\nimport AuctionTimer from './AuctionTimer.js';\nimport {useBids} from './useBids.js';\nimport {connect} from 'react-redux';\n\nconst Pricing = ({data, status, projectHash}) => { \n    let pricing = data.pricing;\n    let {currentBid, reservePrice} = useBids(data);\n    let {bpm} = useBPM(projectHash);\n\n    let type = '';\n    let content = '';\n    if (status === \"RESERVE_AUCTION_PENDING\") {\n        type = (\n            <div className=\"pricing-type\">Reserve Price</div>\n        );\n        content = (\n            <div className=\"price-amount\">\n              {reservePrice} ETH\n            </div>\n        );\n    } else if (status === \"NO_PRICING\") {\n        type = (\n            <div className=\"pricing-type\">Not for sale</div>\n        );\n    } else if (status === \"RESERVE_AUCTION_ACTIVE\") {\n        type = (\n            <div className=\"pricing-type\">\n              Current Bid\n            </div>\n        );\n\n        let {expectedEndTimestamp} = pricing.reserve;\n        let endTime = new Date(parseInt(expectedEndTimestamp)*1000);\n        if (currentBid) {\n            content = (\n                <div className=\"price-amount\">\n                  <div>{currentBid.pricing.amount / Math.pow(10, 18)} ETH </div>\n                  <AuctionTimer endTime={endTime}/>\n                </div>);\n        }\n    } else if (status === \"RESERVE_AUCTION_FINISHED\") {\n        type = (\n            <div className=\"pricing-type\">\n              Sold for\n            </div>\n        );\n\n        let amount = 0;\n        let finalBid = pricing.reserve.previousBids.find(bid => bid.bidType === \"Final\");\n\n        if (pricing.reserve.status === \"Finished\" && finalBid) {\n            amount = finalBid.pricing.prettyAmount;\n        }  else if (pricing.reserve.current.highestBid) {\n            let _pricing = pricing.reserve.current.highestBid.pricing;\n            amount = _pricing.amount / Math.pow(10, 18);\n        }\n        content= (\n            <div className=\"price-amount\">\n              {amount} ETH\n            </div>\n            );\n    }\n\n    return (\n        <div className=\"pricing\">\n          <div className=\"type-and-bpm\">\n            {type}\n            <div className=\"bpm\">\n              <div className=\"bpm-value\">{bpm}</div>\n              <div className=\"bpm-label\">BPM</div>\n            </div>\n          </div>\n          {content}\n        </div>\n    );\n};\n\nconst mapStateToProps = (state, props) => {\n  return {\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Pricing);\n","import React, { useEffect, useCallback, useState} from 'react';\nimport Pricing from './Pricing.js';\nimport ethereum from \"decentralized/ethereum.js\";\nimport {trimName} from './trim.js';\nimport {getAuthorizedCreatorName} from 'nft/sign.js';\nimport {\n    useNFT, useNFTMetadata\n} from \"@zoralabs/nft-hooks\";\nimport {connect} from 'react-redux';\n\nconst Metadata = ({\n    data,\n    reserve,\n    status,\n    perpetual,\n    createdAt,\n    projectHash,\n    setUserId\n}) => { \n    const ret = useNFTMetadata(data.zoraNFT.metadataURI);\n    const [userName, setUserName] = useState(undefined);\n\n    useEffect(() => {\n        let {nft} = data;\n        let {creator, owner} = nft;\n\n        getAuthorizedCreatorName(creator).then(\n            name => {\n                setUserName(name);\n            });\n        /*\n        ethereum.users.getUserName(creator).then(\n            name => setUserName(name));\n            */\n    }, [data, setUserName]);\n\n    if (ret && ret.metadata) {\n        let {metadata} = ret;\n        let {image, name} = metadata;\n        let {nft} = data;\n        let {creator, owner} = nft;\n        let pricing = data.pricing;\n        let reservePrice;\n        if (pricing && pricing.reserve) {\n            reservePrice = pricing.reserve.reservePrice.amount / Math.pow(10,18);\n        }\n        return (\n            <div className=\"work-info\">\n              <img src={image} className=\"work-thumbnail\"/>\n              <div className=\"work-thumbnail-info\">\n                <div className=\"work-name\">{name}</div>\n                <div onClick={(e) => {\n                    e.stopPropagation();\n                    setUserId(creator);\n                }} className=\"pushable work-creator\">{trimName(creator)}</div>\n              </div>\n              <Pricing projectHash={projectHash} status={status} data={data}/>\n            </div>);\n    } else {\n        return 'loading...';\n    }\n}\n\nconst trim = (str) => {\n    if (str.length > 10) {\n        return str.slice(0, 10) + ' ...';\n    }\n    return str;\n};\n\nconst mapStateToProps = (state, props) => {\n  return {\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Metadata);\n","import React, { useEffect, useCallback, useState} from 'react';\nimport Metadata from './Metadata.js';\nimport {Networks, NFTFetchConfiguration} from '@zoralabs/nft-hooks';\nimport {connect} from 'react-redux';\nimport {\n    useNFT, useNFTMetadata\n} from \"@zoralabs/nft-hooks\";\nimport { MediaFetchAgent} from '@zoralabs/nft-hooks';\nimport {NFTFullPage, NFTPreview} from '@zoralabs/nft-components';\n\nconst WorkThumbnail = ({setUserId, mediaId, setSelectedWork, projectHash}) => { \n    const {data} = useNFT(null, mediaId.toString(), {refreshInterval: 30000});\n    let reserve, status, perpetual, createdAtTimestamp;\n    if (data && data.zoraNFT) {\n        createdAtTimestamp = new Date(parseFloat(data.zoraNFT.createdAtTimestamp));\n        reserve = data.pricing.reserve;\n        perpetual = data.pricing.perpetual;\n        status = data.pricing.status;\n    }\n\n    console.log(\"work thumb setuserid=\", setUserId);\n    return (\n        <div onClick={() => setSelectedWork({mediaId, projectHash, data})} className=\"minted-work\">\n          {data && <Metadata\n                     setUserId={setUserId}\n                     projectHash={projectHash}\n                     data={data}\n                     reserve={reserve}\n                     status={status}\n                     perpetual={perpetual}\n                     createdAt={createdAtTimestamp}/>}\n        </div>\n    );\n};\n\nconst mapStateToProps = (state, props) => {\n  return {\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WorkThumbnail);\n","import React, { useRef, useEffect, useCallback, useState} from 'react';\nimport {useScroll} from \"components/selector2/useScroll.js\"\nimport MintedWorkViewer from './MintedWorkViewer.js';\nimport {connect} from 'react-redux';\nimport {useZoraCollection} from \"components/nft/useZoraCollection.js\";\nimport WorkThumbnail from './WorkThumbnail.js';\n\n\nconst MintedCollection = ({setWorkCount, scrollRef, connected, setUserId, setSelectedWork, selectedWork, userId}) => { \n    let {works} = useZoraCollection(userId);\n\n    let {size} = useScroll(scrollRef, 12, true);\n    let className = \"collection-works\";\n    if (selectedWork) {\n        className += \" hide\";\n    }\n\n    useEffect(() => {\n        if (works) {\n            setWorkCount(works.length);\n        }\n    }, [works, setWorkCount]);\n\n    console.log(\"minted collection works=\", works);\n    return (\n        <div className=\"minted-collection\">\n          {selectedWork &&\n           <MintedWorkViewer\n             goBack={() => setSelectedWork(undefined)}\n             connected={connected}\n             projectHash={selectedWork.projectHash}\n             mediaId={selectedWork.mediaId}\n             data={selectedWork.data}/>}\n          <div className={className}>\n            {works.slice(0, size).map(\n                (x,i) =>\n                    <WorkThumbnail\n                      key={x.id}\n                      setUserId={setUserId}\n                      scrollRef={scrollRef}\n                      setSelectedWork={setSelectedWork}\n                      mediaId={x.zoraId} projectHash={x.projectHash}/>)}\n          </div>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state, props) => {\n  return {\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MintedCollection);\n","import React, { useEffect, useCallback, useState} from 'react';\nimport {getAccounts} from 'nft/sign.js';\nimport {connect} from 'react-redux';\n\nconst ConnectWallet = ({connected, setConnected}) => { \n    const connect = useCallback(() => {\n        getAccounts().then(\n            (a) => {\n                console.log(\"setting connected a=\", a);\n                setConnected(a);\n            });\n    }, [setConnected]);\n\n    return (\n        <div onClick={connect} className=\"connect-yr-wallet\">\n          {connected && connected[0] ? trim(connected[0]) : \"Connect Wallet\"}\n        </div>);\n};\n\nconst trim = (str) => str.length > 12 ? str.slice(0, 12) + '...' : str;\n\nconst mapStateToProps = (state, props) => {\n  return {\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConnectWallet);\n","import React, { useRef, useEffect, useCallback, useState} from 'react';\nimport Sidebar from './Sidebar.js';\nimport MintedCollection from \"./MintedCollection.js\";\nimport {Networks, NFTFetchConfiguration} from '@zoralabs/nft-hooks';\nimport ConnectWallet from './ConnectWallet.js';\nimport accounts from \"accounts/Accounts.js\";\nimport ethereum from \"decentralized/ethereum.js\";\nimport {connect} from 'react-redux';\nimport {useUser} from \"components/hooks/useUser.js\";\nimport './collect.scss';\nimport '../../Track.scss';\n\nconst CollectPage = (props) => { \n    let [connected, setConnected] = useState(false);\n    let [workCount, setWorkCount] = useState(undefined);\n    let ref = useRef();\n    let [searchTerm, setSearchTerm] = useState('');\n    let [userId, setUserId] = useState(undefined); /*useUser({\n        name: props.match && props.match.params.userName,\n        store: props.store\n    });*/\n\n    let [selectedWork, setSelectedWork] = useState(undefined);\n\n    useEffect(() => {\n        ref.current.scrollTo(0,0);\n    }, [userId]);\n\n    return (\n        <div className=\"collect-page\">\n          <ConnectWallet connected={connected} setConnected={setConnected}/>\n          {!selectedWork &&\n           <Sidebar\n             workCount={workCount}\n             userId={userId}\n             clearUser={() => setUserId(undefined)} value={searchTerm} setValue={setSearchTerm}/>\n           }\n          <div ref={ref} className=\"works-scroll\">\n          <NFTFetchConfiguration networkId={Networks.RINKEBY}>\n            {/*<div className=\"zuser-name\">{userName}</div>*/}\n            <MintedCollection\n              scrollRef={ref}\n              setWorkCount={setWorkCount}\n              searchTerm={searchTerm}\n              connected={connected}\n              selectedWork={selectedWork}\n              setSelectedWork={setSelectedWork}\n              userId={userId}\n              setUserId={setUserId}\n              userName={\"\"}/>\n          </NFTFetchConfiguration>\n          </div>\n        </div>);\n};\n\nconst mapStateToProps = (state, props) => {\n  return {\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CollectPage);\n"],"sourceRoot":""}