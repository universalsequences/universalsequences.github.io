{"version":3,"sources":["components/UniversalNavigator.js","components/guilds/PotentialUser.js","components/guilds/GuildDetailView.js","components/guilds/GuildItem.js","components/guilds/GuildsListView.js","components/guilds/GuildsContentView.js","components/guilds/GuildsPage.js"],"names":["UniversalNavigator","window","location","this","props","view","_this","samplerClassName","exploreClassName","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","components_modals_LoginModal_js__WEBPACK_IMPORTED_MODULE_9__","show","showLogin","onClick","onClickLogo","onClickSequencer","onClickExplore","onClickSampler","components_toolbar_TransactionsView__WEBPACK_IMPORTED_MODULE_8__","store","components_guilds_GuildsMenu_js__WEBPACK_IMPORTED_MODULE_7__","Component","connect","state","sequencer","PotentialUser","isSelected","react_default","userName","userId","GuildDetailView","Object","classCallCheck","_super","call","addingMember","users","onNameChange","guild","name","adding","arguments","length","undefined","getPotentialUsers","setState","_callee","get","regenerator_default","wrap","_context","prev","next","GetSequences","ethereum","executeQuery","getNext","t0","sent","t1","t2","getUsersFromResults","results","t3","t4","t5","t6","t7","stop","_callee2","i","userNames","_i","_context2","Set","add","user","members","map","x","trim","toUpperCase","Array","from","keys","done","value","getUserName","abrupt","_this2","ConditionedComponent","condition","isEditingName","reactstrap_es","onChange","event","target","placeholder","id","editGuildName","getAddMemberFlow","getShowMembersFlow","_this3","guilds_PotentialUser","usersSelected","has","selectUser","_this4","addMember","member","GuildDetailView_GuildMember","GuildMember","GuildItem","onClickGuild","GuildsListView","guilds","guilds_GuildItem","GuildsContentView","editingGuild","editingName","waitingForNewGuild","creatingNewGuild","passphrase","bind","assertThisInitialized","onPassphraseChange","getGuilds","newGuildCallback","nextProps","userToken","delete","val","guildId","setGuildName","size","forEach","_ref","asyncToGenerator","mark","requestToAddMember","_x","apply","newGuild","createNewGuild","_callee3","_context3","getGuildsForUser","getUsersInGuild","guilds_GuildDetailView","onFinishEditing","doneEditing","LoginModal","PulseLoader_default","sizeUnit","color","loading","CreateNewGuild","guilds_GuildsListView","NewMemberRequests","onClickNewGuild","GuildsPage","accounts","setStore","setEthereum","checkLogin","initGuilds","crypto","PasswordModal","guilds_GuildsContentView"],"mappings":"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","file":"static/js/17.c3ad275f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport GuildsMenu from 'components/guilds/GuildsMenu.js';\nimport TransactionsView from 'components/toolbar/TransactionsView';\nimport LoginModal from 'components/modals/LoginModal.js';\nimport '../navigator.scss';\n\nclass UniversalNavigator extends Component {\n    onClickSequencer() {\n        window.location = '/create/';\n    }\n\n    onClickSampler() {\n        if (this.props.view !== 'DISCOVER') {\n            window.location = '/discover/';\n        }\n    }\n\n    onClickExplore() {\n        if (this.props.view !== 'EXPLORE') {\n            window.location = '/explore/';\n        }\n    }\n\n    onClickLogo() {\n        window.location = '/';\n    }\n\n    render() {\n        let view = this.props.view || '';\n        let samplerClassName = view === 'DISCOVER' ? 'navigator-button selected' : 'navigator-button';\n        let exploreClassName = view === 'EXPLORE' ? 'navigator-button selected' : 'navigator-button';\n        return (\n            <div className=\"navigator\">\n              <LoginModal show={this.props.showLogin}/>\n              <div onClick={()=>this.onClickLogo()} className={\"universal-sequences-logo \" + view}>\n                ZEQUENCER\n              </div>\n              <div onClick={() => this.onClickSequencer()} className=\"navigator-button\">\n                CREATE\n              </div>\n              <div onClick={() => this.onClickExplore()} className={exploreClassName}>\n                EXPLORE\n              </div>\n              <div onClick={() => this.onClickSampler()} className={samplerClassName}>\n                SAMPLE \n              </div>\n              <div className=\"guilds-menu-container\">\n                <TransactionsView store={this.props.store}/>\n                <GuildsMenu store={this.props.store}/>\n              </div>\n            </div>\n        );\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        showLogin: state.sequencer.showLogin,\n    }\n};\n\nexport default connect(mapStateToProps, null)(UniversalNavigator);\n","import React, { Component } from 'react';\n\nclass PotentialUser extends Component {\n    render() {\n        let className = \"potential-member \";\n        if (this.props.isSelected) {\n            className += \"selected\";\n        }\n        return (\n            <div\n              onClick={this.props.onClick}\n              className={className}>\n              <div className=\"user-name\">\n                {this.props.userName}\n              </div>\n              <div className=\"user-id\">\n                {this.props.userId}\n              </div>\n            </div>\n        );\n    }\n}\n\nexport default PotentialUser;\n","import React, { Component } from 'react';\nimport PotentialUser from './PotentialUser.js';\nimport GetSequences from 'search/GetSequences.js';\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\nimport ConditionedComponent from 'components/ConditionedComponent.js';\nimport ethereum from 'decentralized/ethereum.js';\n\nclass GuildDetailView extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            addingMember: false,\n            users: [],\n        };\n    }\n\n    editGuildName() {\n        this.props.onNameChange(this.props.guild.name);\n    }\n\n    addMember(adding=true) {\n        if (adding) {\n            this.getPotentialUsers();\n        }\n        this.setState({\n            addingMember: adding\n        });\n    }\n\n    async getPotentialUsers() {\n        // search sequences for users\n        let get = new GetSequences(ethereum, false);\n\n        await get.executeQuery();\n\n        while ((await get.getNext()) !== undefined) {\n            this.setState({\n                users: await this.getUsersFromResults(get.results)\n            });\n        }\n        this.setState({\n            users: await this.getUsersFromResults(get.results)\n        });\n    }\n\n    async getUsersFromResults(results) {\n        let users = new Set();\n        for (let i in results) {\n            users.add(results[i].user);\n        }\n\n\n        let members = new Set(this.props.guild.members.map(\n            x => x.userId.trim().toUpperCase()));\n\n        users = Array.from(users);\n        let userNames = {};\n        for (let i in users) {\n            let userId = users[i].trim();\n            /*\n            if (members.has(userId.toUpperCase())) {\n                continue;\n            }\n            */\n            let userName = await ethereum.users.getUserName(userId);\n            userNames[userId] = userName;\n        }\n\n        return userNames;\n    }\n\n    render() {\n        let guild = this.props.guild;\n        return (\n            <div className=\"guild-details\">\n              <div className=\"details-header\">\n                <ConditionedComponent condition={this.props.isEditingName}>\n                  <InputGroup className=\"guild-name-input-group\">\n                    <Input onChange={(event) => this.props.onNameChange(event.target.value)}\n                      value={this.props.name}\n                      placeholder=\"Type name for guild\" id=\"guild-name-input\"/>\n                </InputGroup>\n                </ConditionedComponent>\n                <ConditionedComponent condition={!this.props.isEditingName}>\n                <div\n                  onClick={() => this.editGuildName()}\n                  className=\"guild-name\">\n                  {guild.name}\n                </div>\n                </ConditionedComponent>\n              <div className=\"make-default-button\">\n                Make Default Guild\n              </div>\n              </div>\n              {this.getAddMemberFlow()}\n              {this.getShowMembersFlow()}\n            </div>\n        );\n    }\n\n    getAddMemberFlow() {\n        if (!this.state.addingMember) {\n            return (<div></div>);\n        }\n\n        return (\n            <div>\n              <div className=\"add-members-header\">Add member</div>\n              {Object.keys(this.state.users).map(\n                  userId => \n                      <PotentialUser\n                            isSelected={this.props.usersSelected.has(userId)}\n                            onClick={() => this.props.selectUser(userId)}\n                            userId={userId} userName={this.state.users[userId]}/>\n              )}\n\n            </div>\n        );\n    }\n\n    getShowMembersFlow() {\n        if (this.state.addingMember) {\n            return (<div></div>);\n        }\n        return (\n            <div>\n              <div className=\"members-heading\">\n                <div>Members</div>\n                <div onClick={() => this.addMember()} className=\"add-member-button\">+</div>\n              </div>\n              <div className=\"guild-members\">\n                {this.props.guild.members.map(member => <GuildMember member={member}/>)}\n              </div>\n            </div>\n        );\n    }\n}\n\nclass GuildMember extends Component {\n    render() {\n        return (\n            <div className=\"guild-member\">{this.props.member.userName}</div>\n        );\n    }\n}\n\nexport default GuildDetailView;\n","import React, { Component } from 'react';\n\nclass GuildItem extends Component {\n    render() {\n        return (\n            <div\n              onClick={this.props.onClickGuild}\n              className=\"guild-item\">\n              <div className=\"guild-name\">\n                {this.props.guild.name}\n              </div>\n              <div className=\"members-count\">\n                {this.props.guild.members.length} members\n              </div>\n            </div>\n        );\n    }\n}\n\nexport default GuildItem;\n","import React, { Component } from 'react';\nimport GuildItem from './GuildItem.js';\n\nclass GuildsListView extends Component {\n    render() {\n        return (\n            <div className=\"guilds-list\">\n              {this.props.guilds.map(x => <GuildItem\n                                                onClickGuild={() => this.props.onClickGuild(x)}\n                                            guild={x}/>)}\n            </div>\n        );\n    }\n}\n\nexport default GuildsListView;\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport PulseLoader from 'react-spinners/PulseLoader'\nimport LoginModal from 'components/modals/LoginModal.js';\nimport ConditionedComponent from 'components/ConditionedComponent.js';\nimport GuildDetailView from './GuildDetailView.js';\nimport GuildsListView from './GuildsListView.js';\nimport NewMemberRequests from './NewMemberRequests.js';\nimport CreateNewGuild from './CreateNewGuild.js';\nimport ethereum from 'decentralized/ethereum.js';\n\nclass GuildsContentView extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            editingGuild: undefined,\n            editingName: false,\n            guilds: [],\n            waitingForNewGuild: false,\n            creatingNewGuild: false,\n            name: '',\n            passphrase: '',\n            usersSelected: new Set()\n        }\n\n        this.onNameChange = this.onNameChange.bind(this);\n        this.onPassphraseChange = this.onPassphraseChange.bind(this);\n        this.onClickGuild = this.onClickGuild.bind(this);\n        this.getGuilds();\n\n        ethereum.guilds.newGuildCallback = () => this.getGuilds();\n    }\n\n    shouldComponentUpdate(nextProps) {\n        if (nextProps.userToken !== this.props.userToken) {\n            this.getGuilds();\n        }\n        return true;\n    }\n\n    selectUser(userId) {\n        if (this.state.usersSelected.has(userId)) {\n            this.state.usersSelected.delete(userId);\n        } else {\n            this.state.usersSelected.add(userId);\n        }\n\n        this.setState(this.state);\n    }\n\n    onNameChange(val) {\n        this.setState({\n            name: val,\n            editingName: true,\n        });\n    }\n\n    async doneEditing() {\n        if (this.state.editingName && this.state.editingGuild) {\n            if (this.state.editingGuild.name !== this.state.name) {\n                // then we need to rename the guild\n                this.state.editingGuild.name = this.state.name\n                ethereum.guilds.setGuildName(\n                    this.state.editingGuild.guildId,\n                    this.state.name);\n            }\n        }\n        if (this.state.usersSelected.size > 0) {\n            // add to guild\n            let guildId = this.state.editingGuild.guildId;\n            this.state.usersSelected.forEach(\n                async userId => await ethereum.guilds.requestToAddMember(guildId, userId));\n        }\n        this.setState({editingGuild: undefined, editingName: false});\n    }\n\n    onClickGuild(guild) {\n        this.setState({\n            name: '',\n            editingGuild: guild\n        });\n    }\n\n    onPassphraseChange(val) {\n        this.setState({passphrase: val});\n    }\n\n    createNewGuild(name, passphrase) {\n        ethereum.guilds.newGuild(name, passphrase);\n\n        this.setState({\n            waitingForNewGuild: true\n        })\n    }\n\n    onClickNewGuild(creatingNewGuild) {\n        if (!creatingNewGuild) {\n            this.createNewGuild(this.state.name, this.state.passphrase);\n        }\n\n        this.setState({\n            creatingNewGuild: creatingNewGuild\n        });\n    }\n\n    async getGuilds() {\n        let guilds = await ethereum.guilds.getGuildsForUser();\n        for (let i in guilds) {\n            let guild = guilds[i];\n            let members = await ethereum.guilds.getUsersInGuild(guild.guildId);\n            guild.members = members;\n        }\n        this.setState({\n            waitingForNewGuild: false,\n            guilds: guilds\n        });\n    }\n\n    render() {\n        if (this.state.editingGuild) {\n            return (\n                <div className=\"content-view\">\n                  <div className=\"inner-content-view\">\n                    <GuildDetailView\n                      selectUser={(user) => this.selectUser(user)}\n                      usersSelected={this.state.usersSelected}\n                      name={this.state.name}\n                      isEditingName={this.state.editingName}\n                      onNameChange={(name) => this.onNameChange(name)}\n                      guild={this.state.editingGuild}\n                      onFinishEditing={() => this.onClickGuild(undefined)}/>\n                  </div>\n                  <div\n                    onClick={() => this.doneEditing()}\n                    className=\"add-guilds-button\">\n                    <div\n                      className=\"button-text\">\n                      {this.state.usersSelected.size > 0 ? 'Add Members to Guild' : 'Done'}\n                  </div>\n                  </div>\n                </div>\n            );\n \n        }\n\n        return (\n            <div className=\"content-view\">\n              <LoginModal show={this.props.showLogin}/>\n              <div className=\"inner-content-view\">\n                <div className=\"sub-header\">\n                  <div>{this.state.creatingNewGuild ? 'Create New Guild' : 'Guilds'}</div>\n                </div>\n                <div className=\"clear-fix\"/>\n                <ConditionedComponent condition={this.state.waitingForNewGuild}>\n                  <div className=\"creating-new-guild\">\n                    Creating new guild\n                  </div>\n                  <PulseLoader\n                    sizeUnit={\"px\"}\n                    size={10}\n                    color={'#123abc'}\n                    loading={this.state.waitingForNewGuild}/>\n                </ConditionedComponent>\n                <ConditionedComponent condition={this.state.creatingNewGuild}>\n                  <CreateNewGuild\n                    onPassphraseChange={this.onPassphraseChange}\n                    onNameChange={this.onNameChange}\n                    passphrase={this.state.passphrase}\n                    name={this.state.name}/>\n                </ConditionedComponent>\n                <ConditionedComponent condition={!this.state.creatingNewGuild}>\n                  <GuildsListView\n                    onClickGuild={(guild) => this.onClickGuild(guild)}\n                    guilds={this.state.guilds}/>\n\n                    <NewMemberRequests ethereum={ethereum}/>\n                </ConditionedComponent>\n              </div>\n              <div\n                onClick={() => this.onClickNewGuild(!this.state.creatingNewGuild)}\n                className=\"add-guilds-button\">\n                <ConditionedComponent condition={this.state.creatingNewGuild}>\n                  <div\n                    className=\"button-text\">\n                  Done\n                  </div>\n                </ConditionedComponent>\n                <ConditionedComponent condition={!this.state.creatingNewGuild}>\n                  <div className=\"big-plus\">+</div>\n                  <div\n                    className=\"button-text\">\n                    New Guild\n                  </div>\n                </ConditionedComponent>\n              </div>\n            </div>\n        );\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        showLogin: state.sequencer.showLogin,\n        userToken: state.sequencer.userToken,\n    }\n};\n\n\nexport default connect(mapStateToProps, null)(GuildsContentView);\n\n","import React, { Component } from 'react';\nimport UniversalNavigator from '../UniversalNavigator.js';\nimport GuildsContentView from './GuildsContentView.js';\nimport '../../Guilds.scss';\nimport PasswordModal from 'components/modals/PasswordModal.js';\nimport ethereum from 'decentralized/ethereum.js';\nimport accounts from 'accounts/Accounts.js';\n\nclass GuildsPage extends Component {\n    constructor(props) {\n        super(props);\n\n        accounts.setStore(this.props.store);\n        ethereum.store = this.props.store;\n        accounts.setEthereum(ethereum);\n        accounts.checkLogin();\n        ethereum.guilds.initGuilds();\n        ethereum.crypto.store = this.props.store;\n    }\n    render() {\n        return (\n            <div className=\"guilds-page\">\n              <PasswordModal crypto={ethereum.crypto} show={true}/>\n              <UniversalNavigator store={this.props.store}/>\n              <GuildsContentView store={this.props.store}/>\n            </div>\n        );\n    }\n}\n\nexport default GuildsPage;\n"],"sourceRoot":""}