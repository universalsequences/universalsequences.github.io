{"version":3,"sources":["components/tags/TagInputComponent.js","components/tags/TagComponent.js","components/tags/TagsChooserComponent.js","components/tags/TagsOrganizerComponent.js"],"names":["TagInputComponent","props","Object","classCallCheck","this","_super","call","_this","react_default","a","createElement","onChange","e","onTagNameChanged","target","value","tag","placeholder","className","type","Component","TagComponent","chosen","chosenAlready","onClick","TagsChooserComponent","tags","map","tags_TagComponent","chosenSoFar","has","tagsChosen","indexOf","onClickTag","DRUM_MACHINES","tagClassifications","TagClassifications","TagsOrganizerComponent","ethereumCache","EthereumCache","ethereumSearcher","EthereumSoundsSearcher","state","tagName","hierarchy","nextMode","stack","Set","reloadEverything","_callee","guildId","_args","arguments","regenerator_default","wrap","_context","prev","next","length","undefined","loadNewIndex","loadTags","getHierarchy","stop","_callee2","_args2","_context2","console","log","autoBuild","_this2","Drum Machines","Drums","_loop","i","drumMachine","filter","x","includes","push","forEach","add","setState","objectSpread","nextProps","getAllForField","TAG","sort","n","addTagsToHierarchy","ret","splice","concat","_this3","assign","popped","pop","name","Array","from","getFieldsForField","_callee3","_context3","saveClassifications","sent","newHierarchy","_this4","GuildsMenu","tags_TagInputComponent","size","reactstrap_es","color","goDownLevel","goBackUpLevel","getRelevantTags","clearRelevantTags","deleteCategory","saveHierarchy","tags_TagsChooserComponent","connect","guilds","selectedGuild"],"mappings":"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","file":"static/js/18.2b26d96c.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass TagInputComponent extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div>\n              <input                  \n                onChange={e => this.props.onTagNameChanged(e.target.value)}\n                value={this.props.tag}\n                placeholder=\"Type name here\"\n                className='tags-input sample-pack-input'\n                type=\"text\"/>\n            </div>\n        );\n    }\n}\n                \nexport default TagInputComponent;\n","import React, { Component } from 'react';\n\nclass TagComponent extends Component {\n    render() {\n        return (\n            <div className={this.props.chosen ? \"tag-element chosen\" : this.props.chosenAlready ? \"chosen-already tag-element\" : \"tag-element\"} onClick={() => this.props.onClick()}>\n              {this.props.tag}\n            </div>\n        );\n    }\n}\n\nexport default TagComponent;\n","import React, { Component } from 'react';\nimport TagComponent from 'components/tags/TagComponent.js';\n\n\n/**\n * Shows all tags in alphabetical order and allows user\n * to click to add them\n */\nclass TagsChooserComponent extends Component {\n    render() {\n        return (\n            <div>\n              <div className=\"instructions-text\">\n                Click tags that fall under this category\n              </div>\n              <div className=\"tags-container\">\n                {this.props.tags.map(\n                  tag =>\n                        <TagComponent\n                          chosenAlready={this.props.chosenSoFar.has(tag)}\n                          chosen={this.props.tagsChosen.indexOf(tag) > -1}\n                          onClick={() => this.props.onClickTag(tag)}\n                          tag={tag}/>)}\n              </div>\n            </div>\n        );\n    }\n}\n\nexport default TagsChooserComponent;\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport GuildsMenu from \"components/guilds/GuildsMenu.js\";\nimport TagInputComponent from 'components/tags/TagInputComponent.js';\nimport TagsChooserComponent from 'components/tags/TagsChooserComponent.js';\nimport TagClassifications from 'decentralized/TagClassifications.js';\nimport { Badge } from 'reactstrap';\nimport EthereumCache from 'decentralized/cache/EthereumCache.js';\nimport EthereumSoundsSearcher from 'search/EthereumSoundsSearcher.js';\nimport ipfs from 'decentralized/Ipfs.js';\nimport {TAG} from 'constants/field-types.js';\nimport '../../Tags.css';\nimport '../../Common.css';\n\nconst DRUM_MACHINES = [\n    \"707\", \"808\", \"909\", \"Access\", \"Casio\", \"Cheetah\", \"EMU\", \"Electro-Harmonix\", \"Elektron\", \"Elka\",\n    \"Fairlight\", \"Farfisa\", \"Fricke\", \"Kawai\", \"Korg\", \"Linn\", \"Moog\", \"Nintendo\", \"Oberheim\", \"Roland\"];\n                       \n\nconst tagClassifications = new TagClassifications();\n\nclass TagsOrganizerComponent extends Component {\n    constructor(props) {\n        super(props);\n\n        this.ethereumCache = new EthereumCache();\n        this.ethereumSearcher = new EthereumSoundsSearcher(this.ethereumCache);\n\n        this.state = {\n            tagName : '',\n            tagsChosen: [],\n            tags: [],\n            hierarchy: {},\n            nextMode: false,\n        };\n\n        this.stack = [];\n        this.tags = [];\n        this.chosenSoFar= new Set();\n\n        this.reloadEverything();\n    }\n\n    async reloadEverything(guildId=0) {\n        await this.ethereumCache.loadNewIndex(guildId);\n        this.loadTags();\n        this.chosenSoFar = new Set();\n        this.getHierarchy(guildId);\n    }\n\n    async getHierarchy(guildId=this.props.guildId) {\n        console.log('getHierarchy called');\n        /*\n        this.setState({hierarchy: await tagClassifications.getClassifications(guildId)});\n\n        Object.values(this.state.hierarchy).forEach(\n            tags => \n                tags.forEach(tag => \n                             this.chosenSoFar.add(tag)));\n        */\n\n        this.autoBuild();\n    }\n\n    autoBuild() {\n        console.log('auto build called with tags = ');\n        console.log(this.state.tags);\n        let hierarchy = {\n            \"Drum Machines\": [],\n            \"Drums\": [\"kick\", \"snare\", \"hi-hat\", \"clap\", \"crash\", \"rim\", \"side-stick\", \"ride\"],\n        };\n        for (let i in DRUM_MACHINES) {\n            let drumMachine = DRUM_MACHINES[i];\n\n            // find all tags with this in the name\n            let tags = this.state.tags.filter(x => x !== drumMachine && x.includes(drumMachine));\n            if (tags.length > 0) {\n                hierarchy[\"Drum Machines\"].push(drumMachine);\n                hierarchy[drumMachine] = tags;\n                tags.forEach(tag => this.chosenSoFar.add(tag));\n                this.chosenSoFar.add(drumMachine);\n            }\n        }\n\n        this.setState({\n            hierarchy: {\n                ... this.state.hierarchy,\n                ... hierarchy,\n            }\n        });\n    }\n\n    shouldComponentUpdate(nextProps) {\n        if (nextProps.guildId !== this.props.guildId) {\n            this.reloadEverything(nextProps.guildId);\n        }\n        return true;\n    }\n\n    loadTags() {\n        this.tags = this.ethereumCache.getAllForField(TAG, 0, 3000)\n            .map(x => x.value);\n        this.tags.sort();\n        this.setState({tags:  this.tags});\n    }\n\n    onTagNameChanged(n) {\n        if (this.state.tagsChosen.length > 0) {\n            this.addTagsToHierarchy();\n        }\n\n        if (n in this.state.hierarchy) {\n            this.setState({tagsChosen: this.state.hierarchy[n]});\n        } else {\n            this.setState({tagsChosen:  []});\n        }\n        this.setState({tagName: n});\n    }\n\n    onClickTag(tag) {\n        if (this.state.nextMode) {\n            // see if theres anything saved for that tag\n            let ret = this.state.hierarchy[tag];\n            ret = ret === undefined ? [] : ret;\n            this.setState({\n                tagName: tag,\n                nextMode: false,\n                tagsChosen: ret,\n                tags: this.tags,\n            });\n\n            return;\n        }\n    \n        let i = this.state.tagsChosen.indexOf(tag);\n        if (i > -1) {\n            let tags = this.state.tagsChosen;\n            tags.splice(i, 1);\n            this.setState({tagsChosen: tags});\n        } else {\n            this.setState({tagsChosen: this.state.tagsChosen.concat([tag])})\n        }\n    }\n\n    addTagsToHierarchy(n=this.state.tagName) {\n        let hierarchy = Object.assign(this.state.hierarchy, {});\n        hierarchy[this.state.tagName] = this.state.tagsChosen;\n        console.log('adding to ' + this.state.tagName + ' tags =');\n        console.log(this.state.tagsChosen);\n        this.state.tagsChosen.forEach(\n            tag => this.chosenSoFar.add(tag));\n        \n        this.setState({hierarchy: hierarchy});\n        console.log('hierarchy = ');\n        console.log(hierarchy);\n        \n    }\n\n    goBackUpLevel() {\n        this.addTagsToHierarchy();\n\n        if (this.stack.length == 0) {\n            this.setState({\n            nextMode: false,\n            tagName: '',\n            tags: this.tags,\n            tagsChosen: []\n            });\n            return;\n        }\n\n        let popped = this.stack.pop();\n        this.setState({\n            nextMode: false,\n            tagName: popped.name,\n            tags: this.tags,\n            tagsChosen: popped.tags\n        });\n    }\n\n    goDownLevel() {\n        if (!this.state.nextMode) {\n            this.stack.push({name: this.state.tagName,\n                             tags: this.state.tagsChosen});\n            this.addTagsToHierarchy();\n            this.setState({\n                nextMode: true,\n                tagsChosen: [],\n                tags: this.state.tagsChosen,\n                      });\n        }\n    }\n\n    getRelevantTags() {\n        this.setState({\n            tags: Array.from(this.ethereumCache.getFieldsForField(TAG, TAG, this.state.tagName)).sort(),\n        });\n    }\n\n    clearRelevantTags() {\n        this.setState({\n            tags: this.tags,\n        });\n    }\n\n    async saveHierarchy() {\n        //let hash = await ipfs.addJson(this.state.hierarchy);\n        console.log('saving the tags classification = ');\n        console.log(this.state.hierarchy);\n        delete this.state.hierarchy[''];\n        let hash = await tagClassifications.saveClassifications(this.props.guildId, this.state.hierarchy);\n   }\n\n    deleteCategory() {\n        let newHierarchy = {...this.state.hierarchy};\n        let tags = newHierarchy[this.state.tagName];\n        delete newHierarchy[this.state.tagName];\n        tags.forEach(tag => delete newHierarchy[tag]);\n        console.log('new hierarchy = ');\n        console.log(newHierarchy);\n        this.setState({\n            hierarchy: newHierarchy,\n            tagName: ''\n                      });\n    }\n\n    render() {\n        return (\n            <div>\n              <div className=\"tags-navigator\">\n                <div className=\"header\">TAGS ORGANIZER</div>\n                <GuildsMenu/>\n              </div>\n              <TagInputComponent\n                tag={this.state.tagName}\n                onTagNameChanged={(n) => this.onTagNameChanged(n)}/>\n                <div className=\"info-text\">{this.stack.length} deep and {this.chosenSoFar.size}/{this.tags.length} tags done</div>\n              <div>\n                {this.state.tagsChosen.map((tag) => <Badge color=\"light\">{tag}</Badge>)}\n              </div>\n              <div\n                className=\"common-button light-blue-button\"\n                onClick={() => this.goDownLevel()}>\n                DOWN LEVEL\n              </div>\n              <div\n                className=\"common-button light-blue-button\"\n                onClick={() => this.goBackUpLevel()}>\n                UP LEVEL\n              </div>  \n              <div\n                className=\"common-button light-blue-button\"\n                onClick={() => this.getRelevantTags()}>\n               GET RELEVANT TAGS \n              </div>\n              <div\n                className=\"common-button light-blue-button\"\n                onClick={() => this.clearRelevantTags()}>\n                CLEAR RELEVANT TAGS\n              </div>\n              <div\n                className=\"common-button light-blue-button\"\n                onClick={() => this.deleteCategory()}>\n                DELETE CATEGORY\n              </div>\n              <div\n                className=\"common-button light-blue-button\"\n                onClick={() => this.saveHierarchy()}>\n                SAVE\n              </div>\n             <TagsChooserComponent\n                  tags={this.state.tags}\n                  chosenSoFar={this.chosenSoFar}\n                  tagsChosen={this.state.tagsChosen}\n                  onClickTag={(tag) => this.onClickTag(tag)}/>\n            </div>\n        );\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        guildId: state.guilds.selectedGuild ? state.guilds.selectedGuild.guildId : 0\n    };\n};\n\nexport default connect(mapStateToProps, null)(TagsOrganizerComponent);\n"],"sourceRoot":""}