{"version":3,"sources":["decentralized/pinner/pinner.js","components/download/IPFSDownloader.js"],"names":["EVENTS","events","SampleCreated","NewDiscogsSample","contract","GuildSamplesContract","contractAddress","TokenizedSequenceEdited","TokenizedSequencesContract","NewPreset2","GuildPresetsContract","NewWallpaper","WallpaperContract","ReleaseInfo","ArtistsContract","NewEffect","EffectsContract","getAllHashes","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","hashes","_iterator","_step","e","pinned","l","wrap","_context","prev","next","_createForOfIteratorHelper","s","n","done","value","t0","t1","toConsumableArray","t2","getContractHashes","t3","sent","t4","concat","call","t5","f","finish","t6","Set","ipfs","getPinnedHashes","t7","map","x","filter","has","reverse","abrupt","stop","apply","this","arguments","_ref3","_callee2","_ref2","_iterator2","_step2","_loop","_context3","event","topic","query","results","_context2","topics","data","find","t","type","IPFS_HASH","BackendQuery","from","select","name","executeQuery","delegateYield","_x","connect","state","props","dispatch","_useState","useState","_useState2","slicedToArray","setHashes","pinner","useRef","undefined","_useState3","pinning","progress","_useState4","setPinned","useEffect","then","length","console","log","current","_ref4","_callee3","_iterator3","_step3","_loop2","_context5","hash","_context4","add","pin","delete","size","sleep","pinAll","useInterval","react_default","createElement"],"mappings":"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","file":"static/js/22.b38dd8a4.chunk.js","sourcesContent":["import BackendQuery from \"decentralized/BackendQuery.js\";\nimport {sleep} from \"utils/sleep.js\";\nimport ipfs from \"decentralized/Ipfs.js\"\nimport {IPFS_HASH} from \"decentralized/EthereumDataTypes.js\";\nimport {\n    SampleCreated,\n    TokenizedSequenceEdited,\n    ReleaseInfo,\n    NewDiscogsSample,\n    NewPreset2,\n    NewWallpaper,\n    NewEffect\n} from '../EthereumEvents.js';\nimport GuildSamplesContract from \"decentralized/contracts/GuildSamplesContract.js\";\nimport TokenizedSequencesContract from \"decentralized/contracts/TokenizedSequencesContract.js\";\nimport GuildPresetsContract from \"decentralized/contracts/GuildPresetsContract.js\";\nimport ArtistsContract from \"decentralized/contracts/ArtistsContract.js\";\nimport WallpaperContract from \"decentralized/contracts/WallpaperContract.js\";\nimport EffectsContract from \"decentralized/contracts/EffectsContract.js\";\n\nconst CONCURRENT_SIZE = 12;\n\nexport const EVENTS = [\n    {\n        events: [SampleCreated, NewDiscogsSample],\n        contract:  new GuildSamplesContract().contractAddress\n    },\n    {\n        events: [TokenizedSequenceEdited],\n        contract: new TokenizedSequencesContract().contractAddress\n    },\n    {\n        events: [NewPreset2],\n        contract: new GuildPresetsContract().contractAddress\n    },\n    {\n        events: [NewWallpaper],\n        contract: new WallpaperContract().contractAddress\n    },\n    {\n        events: [ReleaseInfo],\n        contract: new ArtistsContract().contractAddress\n    },\n    {\n        events: [NewEffect],\n        contract: new EffectsContract().contractAddress\n    }\n];\n\n/**\n * returns all the hashes we need to download\n */\nexport const getAllHashes = async () => {\n    let hashes = [];\n\n    for (let e of EVENTS) {\n        hashes = [\n            ... hashes,\n            ... await getContractHashes(e)];\n    }\n\n    let pinned = new Set(await ipfs.getPinnedHashes());\n    let l = hashes\n        .map(x => x)\n        .filter(\n        x => !pinned.has(x));\n    l.reverse();\n    return l;\n};\n\nconst getContractHashes = async ({contract, events}) => {\n    let hashes = [];\n    for (let event of events) {\n        // find topic that is IPFS_HASH event.topics\n        let topic = [...event.topics, ...event.data]\n            .find(t => t.type === IPFS_HASH);\n        let query = new BackendQuery(contract)\n            .from(event)\n            .select(topic.name);\n        let results = await query.executeQuery();\n        hashes = [... hashes, ... results.map(x => x[topic.name])];\n    }\n    return hashes\n        .filter(x => x && x !== \"0\");\n};\n\nexport const pinAll = (hashes) => {\n    let pinned = new Set();\n    let pinning = new Set();\n\n    const pin = async () => {\n        \n        let i=0;\n        for (let hash of hashes) {\n            if (hash === \"0\" || hash === 0) {\n                continue;\n            } \n            console.log('pinning \\\"' + hash+\"\\ type=\", typeof hash);\n            pinning.add(hash);\n            ipfs.pin(hash).then(\n                x => {\n                    console.log('successfully pinned hash=', hash);\n                    pinned.add(hash);\n                    pinning.delete(hash);\n                });\n            // wait till everything has pinned\n            while (pinning.size > CONCURRENT_SIZE) {\n                await sleep(100);\n            }\n        }\n    };\n\n    pin();\n    return () => ({\n        pinned:pinned.size,\n        pinning: pinning.size,\n        progress: 100.0 * (pinned.size) / hashes.length\n    });\n};\n\n","import React, { useEffect, useCallback, useState, useRef} from 'react';\nimport {useInterval} from \"components/hooks/useInterval.js\";\nimport {connect} from 'react-redux';\nimport {pinAll, getAllHashes} from \"decentralized/pinner/pinner.js\"\n\nconst IPFSDownloader = (props) => { \n    let [hashes, setHashes] = useState([]);\n    let pinner = useRef(undefined);\n    let [pinned , setPinned] = useState({pinner: 0, pinning: 0, progress: 0});\n    useEffect(() => {\n        getAllHashes().then(setHashes);\n    }, []);\n\n    useEffect(() => {\n        if (hashes.length > 0) {\n            console.log('hashes  = ', hashes);\n            pinner.current = pinAll(hashes);\n        }\n    }, [hashes]);\n\n    useInterval(() => {\n        if (pinner.current) {\n            setPinned(pinner.current());\n        }\n    }, 50);\n    \n    return (\n        <div>\n          DOWNLOADER: {hashes.length} total hashes (pinned {pinned.pinned} pinning {pinned.pinning}) Progress={pinned.progress}%\n\n        </div>\n    );\n}\n\nconst mapStateToProps = (state, props) => {\n  return {\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IPFSDownloader);\n"],"sourceRoot":""}