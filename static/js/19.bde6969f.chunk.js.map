{"version":3,"sources":["components/contour/Contour.js"],"names":["PTS","x","y","sortPts","console","log","connect","state","props","dispatch","_useState","useState","_useState2","Object","_Users_alecresende_code_visual_sampler_sequencer_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","step","setStep","_useState3","_useState4","showColors","setShowColors","_useState5","_useState6","tension","setTension","_useState7","hex","_useState8","color","setColor","_useState9","_useState10","mouse","setMouse","ref","useRef","undefined","ctxt","useEffect","current","getContext","scale","window","devicePixelRatio","onMouseMove","useCallback","e","pageX","pageY","clearRect","draw","arguments","length","c","tri","map","pt","off","fillStyle","fill","drawContours","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","className","onClick","style","backgroundColor","react_color__WEBPACK_IMPORTED_MODULE_10__","onChange","react_bootstrap_slider__WEBPACK_IMPORTED_MODULE_6___default","value","change","target","max","min","orientation","reversed","width","height"],"mappings":"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","file":"static/js/19.bde6969f.chunk.js","sourcesContent":["import React, { useRef, useEffect, useCallback, useState} from 'react';\nimport {drawContours} from './drawContours.js';\nimport {spline} from \"effects/midi/mappable/spline.js\"\nimport ReactBootstrapSlider from 'react-bootstrap-slider';\nimport {sleep} from \"utils/sleep.js\"\nimport {getTrianglePoints} from './raster.js';\nimport {connect} from 'react-redux';\nimport {ChromePicker} from 'react-color';\nimport '../../ContourTest.scss';\nimport {sortPts} from './sort.js';\n\nconst WIDTH = 1200;\nconst HEIGHT = 1200;\n\nconst A = {x: 0, y: 50};\nconst B = {x: 750, y: 550};\nconst C = {x: 250, y: 750};\n\nconst PTS = [A,B,C];\nsortPts(PTS);\n\nconsole.log(PTS);\n\nconst Contour = (props) => { \n    let [step, setStep] = useState(40);\n    let [showColors, setShowColors] = useState(false);\n    let [tension, setTension] = useState(0.8);\n    let [color, setColor] = useState({hex: '#ffffff'});\n    let [mouse, setMouse] = useState({x:0,y:0});\n    let ref = useRef(undefined);\n    let ctxt = useRef(undefined);\n\n    useEffect(() => {\n        ctxt.current = ref.current.getContext('2d');\n        ctxt.current.scale(window.devicePixelRatio, window.devicePixelRatio);\n\n    }, []);\n\n    const onMouseMove = useCallback((e) => {\n        setMouse({x: e.pageX, y: e.pageY});\n    }, [setMouse]);\n\n    useEffect(() => {\n        ctxt.current.clearRect(0,0,WIDTH,HEIGHT);\n        draw(0);\n        /*\n        draw(250);\n        draw(500);\n        draw(750);\n\n        draw(0,250);\n        draw(250,250);\n        draw(500,250);\n        draw(750,250);\n\n        draw(0,500);\n        draw(250,500);\n        draw(500,500);\n        draw(750,500);\n        */\n    }, [color, step, tension]);\n\n    const start = async () => {\n        for (let i=0; i < 100; i++) {\n            draw(i);\n            await sleep(100);\n        }\n    };\n\n    const off = (pt,x,y) => ({x: pt.x + x, y: pt.y+y});\n    const draw = useCallback((x=0, y=0) => {\n\n        let c = ctxt.current;\n\n        let tri = PTS.map(pt => off(pt, x,y));\n\n        c.fillStyle = \"black\";\n        c.fill();\n        drawContours(tri[0], tri[1], tri[2], c, step, color.hex);\n\n        /*\n        c.beginPath();\n        c.lineWidth = 2;\n        c.moveTo(tri[0].x, tri[0].y);\n        c.lineTo(tri[1].x, tri[1].y);\n        c.lineTo(tri[2].x, tri[2].y);\n        c.closePath();\n\n\n        let {triangles, points, contours, segments}= getTrianglePoints(tri, step, 100);\n\n        if (step > 0) {\n            c.lineWidth= 1;\n        }  else {\n            c.lineWidth= Math.max(1, Math.pow(step, .5));\n        }\n\n        triangles.forEach(\n            ([t1, t2, t3]) => {\n                c.beginPath();\n                c.moveTo(t1.x, t1.y);\n                c.lineTo(t2.x, t2.y);\n                c.lineTo(t3.x, t3.y);\n                c.strokeStyle = \"rgba(255, 255, 255,\" + 0.01 +\")\";\n                c.stroke();\n            });\n\n        segments.forEach(\n            l => {\n                c.beginPath();\n                c.moveTo(l[0].x, l[0].y);\n                c.lineTo(l[1].x, l[1].y);\n                c.strokeStyle = \"red\";\n                c.stroke();\n            });\n                \n\n        contours.forEach(\n            (l, i) => {\n                if (l.length === 0) {\n                    return;\n                }\n                let d = `M ${l[0].x}, ${l[0].y} L ` + l.slice(1).map(({x,y}) => x+','+y).join(' ');\n                //let d = spline(l, tension, false);\n                \n                let path = new Path2D(\n                    d);\n                let r = ((i+1) / contours.length) * 244;\n                let g = ((i+1) / contours.length) * 255/2;;\n                let b = ((i+1) / contours.length) * 255/3;\n                // i = Math.round(16*(i / contours.length));\n                c.strokeStyle= color.hex + i.toString(16);\n                c.stroke(path);\n            });\n        points.forEach(\n            pt => {\n                c.beginPath();\n                if (step<=4) {\n                    c.fillRect(pt.x, pt.y, 1, 1);\n                } else {\n                    c.arc(pt.x, pt.y, 1, 0, 2*Math.PI);\n                }\n                c.fillStyle = \"rgba(255, 255, 255,\" + 0.9*Math.random() +\")\";\n                c.fill();\n            });\n        */\n\n\n    }, [step, tension, color]);\n   \n    return (\n        <div onMouseMove={onMouseMove} className=\"contour-test\">\n          <div className=\"color-dot\" onClick={() => setShowColors(!showColors)}></div>\n          {showColors && <div style={{backgroundColor: color.hex}} className=\"color-pickers\">\n           <ChromePicker color={color} onChange={setColor}></ChromePicker></div>}\n          <div className=\"mouse-info\">x: {mouse.x} y: {mouse.y}</div>\n          <div className=\"sliders-contours\">\n          <ReactBootstrapSlider\n            value={step}\n            change={(e) => setStep(e.target.value)}\n            step={1}\n            max={150}\n            min={2}\n            orientation=\"horizontal\"\n            reversed={false}\n          />\n          <ReactBootstrapSlider\n            value={tension}\n            change={(e) => setTension(e.target.value)}\n            step={0.1}\n            max={8}\n            min={0.1}\n            orientation=\"horizontal\"\n            reversed={false}\n          />\n          </div>\n          <canvas\n            style={{\n                width: WIDTH,\n                height: HEIGHT\n            }}\n            width={WIDTH*window.devicePixelRatio}\n            height={HEIGHT*window.devicePixelRatio}\n            ref={ref}>\n          </canvas>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state, props) => {\n  return {\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Contour);\n"],"sourceRoot":""}